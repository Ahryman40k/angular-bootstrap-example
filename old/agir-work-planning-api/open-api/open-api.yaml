openapi: 3.0.2
info:
  version: 1.0.0
  title: Roadwork intervention planning API
  contact:
    name: Julien Riel
    email: julien.riel@montreal.ca
  license:
    name: Copyright (C) Ville de Montreal
  description: >
    ## About

    The purpose of this software is to allow roadwork planners and executors of
    the Ville de Montreal to coordinate interventions and projects seamlessly
    and in accordance with annual priorities, budgets and constraints.

    ## Authentication

    This API is secured with Bearer Authentication over TLS (HTTPS).
    | [https://swagger.io/docs/specification/authentication/bearer-authentication](https://swagger.io/docs/specification/authentication/bearer-authentication)

    ## Users

    The identity server of the Ville de Montreal is the center component employed
    for user management.

    ## Permissions

    This software uses the internal permission API developed by the Ville de Montreal.

tags:
  - name: Asset
    description: Resources for getting assets from external systems.
  - name: Intervention
    description: Resources for managing roadwork interventions.
  - name: Intervention - Comment
    description: Resources for managing interventions comments.
  - name: Intervention - Decision
    description: Resources for managing interventions decisions.
  - name: Intervention - Document
    description: Resources for managing interventions documents.
  - name: Project
    description: Resources for managing roadwork projects.
  - name: Project - Comment
    description: Resources for managing projects comments.
  - name: Project - Decision
    description: Resources for managing projects decisions.
  - name: Project - Document
    description: Resources for managing projects documents.
  - name: Annual Distribution
    description: Resources for managing annual distributions for interventions and projects.
  - name: Annual Program
    description: Resources for managing annual programs.
  - name: Program Book
    description: Resources for managing program books.
  - name: Objective
    description: Resources for managing objectives.
  - name: Priority
    description: Resources for managing priorities.
  - name: Opportunity Notice
    description: Resources for managing opportunity notices.
  - name: Requirement
    description: Resources for managing requirements on interventions and projects.
  - name: Submission
    description: Resources for managing submissions.
  - name: Submission - Document
    description: Resources for managing submissions documents.
  - name: Search
    description: Resources for spatial search.
  - name: NEXO Import
    description: Resources for managing NEXO imports.
  - name: Info-RTU Import
    description: Resources for managing Info-RTU imports.
  - name: RTU Project
    description: Resources for managing RTU projects.
  - name: Info-RTU Export
    description: Resources for managing exports to Info-RTU.
  - name: Info-RTU Export Log
    description: Resources for managing Info-RTU export logs.
  - name: Info-RTU Import Log
    description: Resources for managing Info-RTU import logs.
  - name: Import
    description: Resources for managing data imports.
  - name: BIC Import Log
    description: Resources for managing BIC import logs.
  - name: Taxonomy
    description: Resources for managing taxonomies.
  - name: User
    description: Resources for managing the connected users.
  - name: Diagnostic
    description: Resources for diagnosing the AGIR-Planification API.
servers:
  - url: "https://api.dev.interne.montreal.qc.ca/api/public-works/planning/v1"
  - url: "https://api.accept.interne.montreal.qc.ca/api/public-works/planning/v1"
  - url: "https://api.interne.montreal.qc.ca/api/public-works/planning/v1"
security:
  - BearerAuth: []
  - OpenID: []

paths:
  "/v1/info":
    get:
      tags:
        - Diagnostic
      summary: Retrieves name and version of the AGIR-Planification API.
      description: Allows to retrieve name and version of the AGIR-Planification API.
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiagnosticsInfo"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/annualPrograms":
    post:
      tags:
        - Annual Program
      summary: Creates an annual program.
      description: Allows to create an annual program. Validates the body content and returns the created annual program.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+programmations+annuelles
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The annual program content to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainAnnualProgram"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedAnnualProgram"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Annual Program
      summary: Lists all active annual programs.
      description: Allows to view a list of the active annual programs based on query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+programmations+annuelles
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/QueryId"
        - $ref: "#/components/parameters/Year"
        - $ref: "#/components/parameters/FromYear"
        - $ref: "#/components/parameters/ToYear"
        - $ref: "#/components/parameters/ExecutorId"
        - $ref: "#/components/parameters/AnnualProgramStatus"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of annual programs
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EnrichedAnnualProgram"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/annualPrograms/{id}":
    get:
      tags:
        - Annual Program
      summary: Returns one specific annual program.
      description: Allows to retrieve one specific annual program based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+programmations+annuelles
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/Expand"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedAnnualProgram"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Annual Program
      summary: Updates one specific annual program.
      description: Allows to update one specific annual program based on the identifier. Returns the updated annual program.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+programmations+annuelles
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The annual program content to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainAnnualProgram"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedAnnualProgram"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Annual Program
      summary: Deletes one specific annual program.
      description: Allows to delete one specific annual program based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+programmations+annuelles
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          description: No content
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/annualPrograms/{id}/programBooks":
    post:
      tags:
        - Program Book
      summary: Creates a program book.
      description: Allows to create a program book in an annual program. Validates the body content and returns the created program book.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The program book content to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainProgramBook"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Program Book
      summary: Retrieves an annual program's program books.
      description: Allows to retrieve the list of program books in an annual program.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Fields"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/opportunityNotices":
    post:
      tags:
        - Opportunity Notice
      summary: >
        Creates a project opportunity notice for an asset that falls within a project workarea.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The opportunity notice to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainOpportunityNotice"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Opportunity Notice
      summary: Retrieves all the opportunity notices for a project.
      description: Allows to retrieve all the opportunity notices associated to a project.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/ProjectId"
      responses:
        "200":
          description: "Successful"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/opportunityNotices/{id}":
    get:
      tags:
        - Opportunity Notice
      summary: Retrieves a specific project opportunity notice.
      description: Allows to retrieve a specific project opportunity notice based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Opportunity Notice
      summary: Updates the content of a specific opportunity notice.
      description: Allows to update the content of a specific opportunity notice based on the identifier. Returns the updated opportunity notice.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The opportunity notice to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainOpportunityNotice"
      responses:
        "200":
          description: "Successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  "/v1/opportunityNotices/{id}/notes":
    post:
      tags:
        - Opportunity Notice
      summary: Adds a note to an opportunity notice.
      description: Allows to add a note to an opportunity notice based on the identifier. Returns the updated opportunity notice.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The opportunity note to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainNote"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/opportunityNotices/{id}/notes/{noteId}":
    put:
      tags:
        - Opportunity Notice
      summary: Modifies a note of an opportunity notice.
      description: Allows to modify a note of an opportunity notice based on the identifiers. Returns the updated opportunity notice.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147817381
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathNoteId"
      requestBody:
        description: The note to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainNote"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedOpportunityNotice"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions":
    post:
      tags:
        - Intervention
      summary: Creates roadwork intervention.
      description: >
        Allows to create a roadwork intervention. Validates the body content and returns the created intervention.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The intervention content to be created.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainIntervention"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Intervention
      summary: Lists all active roadwork interventions.
      description: >-
        Allows to view/export a list of the active roadwork interventions based
        on query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Ids"
        - $ref: "#/components/parameters/AssetId"
        - $ref: "#/components/parameters/AssetOwnerId"
        - $ref: "#/components/parameters/AssetTypeId"
        - $ref: "#/components/parameters/BoroughId"
        - $ref: "#/components/parameters/DecisionTypeId"
        - $ref: "#/components/parameters/Estimate"
        - $ref: "#/components/parameters/FromEstimate"
        - $ref: "#/components/parameters/ToEstimate"
        - $ref: "#/components/parameters/InterventionAreaBbox"
        - $ref: "#/components/parameters/InterventionTypeId"
        - $ref: "#/components/parameters/InterventionYear"
        - $ref: "#/components/parameters/FromInterventionYear"
        - $ref: "#/components/parameters/ToInterventionYear"
        - $ref: "#/components/parameters/MedalId"
        - $ref: "#/components/parameters/PlanificationYear"
        - $ref: "#/components/parameters/FromPlanificationYear"
        - $ref: "#/components/parameters/ToPlanificationYear"
        - $ref: "#/components/parameters/ProgramId"
        - $ref: "#/components/parameters/Project"
        - $ref: "#/components/parameters/Q"
        - $ref: "#/components/parameters/RequestorId"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/WorkTypeId"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/DecisionRequired"
        - $ref: "#/components/parameters/ExecutorId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedPaginatedInterventions"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}":
    get:
      tags:
        - Intervention
      summary: Returns one specific active roadwork intervention based on the identifier.
      description: >
        Allows to view/export one specific active roadwork intervention based on the
        query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Intervention
      summary: Modifies a specific intervention based on the identifier.
      description: Allows to modify a roadwork intervention based on the identifier. Returns the updated roadwork intervention.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/ETag"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The intervention content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainIntervention"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Intervention
      summary: Expires a specific intervention based on the identifier.
      description: Allows to deactive/expire roadwork intervention based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/annualDistribution":
    put:
      tags:
        - Annual Distribution
      summary: Updates the intervention's annual distribution.
      description: Allows to modify the metadata and the annual distribution attached to an intervention.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The plain annual distribution to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterventionAnnualDistribution"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/comments":
    post:
      tags:
        - Intervention - Comment
      summary: Creates a comment for an intervention based on the identifier.
      description: Creates a comment for an intervention based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The comment to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainComment"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Intervention - Comment
      summary: Lists all comments associated with an intervention based on the identifier.
      description: Lists all comments associated with an intervention based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment" #should be paginated
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/comments/{idComment}":
    put:
      tags:
        - Intervention - Comment
      summary: Updates a comment for an intervention based on the identifiers.
      description: Updates a comment for an intervention based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathCommentId"
      responses:
        "200":
          description: Modified comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Intervention - Comment
      summary: Deletes a comment for an intervention based on the identifiers.
      description: Deletes a comment for an intervention based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathCommentId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/decisions":
    post:
      tags:
        - Intervention - Decision
      summary: Attaches a decision to an intervention based on the identifier.
      description: Allows to attach a decision on an intervention based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The intervention decision to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnrichedIntervention"
      responses:
        "201":
          $ref: "#/components/responses/Created"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Intervention - Decision
      summary: Returns decisions of an intervention based on the identifier.
      description: Allows to retrieve decisions of an intervention based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DecisionList"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/documents":
    post:
      tags:
        - Intervention - Document
      summary: Attaches a document to an intervention based on the identifier.
      description: >
        Allows to upload a document to an intervention based on the identifier. Proxies the storage API.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The document multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainDocument"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedDocument"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/{id}/documents/{documentId}":
    get:
      tags:
        - Intervention - Document
      summary: Downloads an intervention document based on the identifier.
      description: Downloads an intervention document based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "200":
          description: The binary of the document.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Intervention - Document
      summary: Updates a document to an intervention based on the identifiers.
      description: >
        Allows to modify metadata and a document attached to an intervention based on the identifiers.
        Proxies the storage API.
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      requestBody:
        description: The document multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainDocument"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedDocument"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Intervention - Document
      summary: Deletes a specific document attached on a specific intervention based on the identifiers.
      description: Allows to delete a document on an intervention based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/search":
    post:
      tags:
        - Intervention
      summary: Lists all active roadwork interventions.
      description: >-
        Allows to filter all the existing interventions based on the search parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      requestBody:
        description: The search parameter filters.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterventionSearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedPaginatedInterventions"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/countBy":
    get:
      tags:
        - Intervention
      summary: Gets a count of interventions.
      description: >-
        Allows to get a filtered count of all interventions by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/CountBy"
        - $ref: "#/components/parameters/AssetId"
        - $ref: "#/components/parameters/AssetOwnerId"
        - $ref: "#/components/parameters/AssetTypeId"
        - $ref: "#/components/parameters/BoroughId"
        - $ref: "#/components/parameters/DecisionTypeId"
        - $ref: "#/components/parameters/Estimate"
        - $ref: "#/components/parameters/FromEstimate"
        - $ref: "#/components/parameters/ToEstimate"
        - $ref: "#/components/parameters/InterventionAreaBbox"
        - $ref: "#/components/parameters/InterventionTypeId"
        - $ref: "#/components/parameters/InterventionYear"
        - $ref: "#/components/parameters/FromInterventionYear"
        - $ref: "#/components/parameters/ToInterventionYear"
        - $ref: "#/components/parameters/PlanificationYear"
        - $ref: "#/components/parameters/FromPlanificationYear"
        - $ref: "#/components/parameters/ToPlanificationYear"
        - $ref: "#/components/parameters/ProgramId"
        - $ref: "#/components/parameters/Project"
        - $ref: "#/components/parameters/Q"
        - $ref: "#/components/parameters/RequestorId"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/WorkTypeId"
        - $ref: "#/components/parameters/DecisionRequired"
        - $ref: "#/components/parameters/ExecutorId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    post:
      tags:
        - Intervention
      summary: Gets a count of interventions.
      description: >-
        Allows to get a filtered count of all interventions by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+interventions
      requestBody:
        description: The search parameter filters and the count key.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterventionCountBySearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/interventions/extract":
    post:
      tags:
        - Intervention
      summary: Extracts in a CSV file all the existing interventions based on the search parameters.
      description: Allows to extract in a CSV file all the existing interventions based on the search parameters.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=170200083
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The search parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InterventionExtractSearchRequest"
      responses:
        "200":
          description: The binary of the CSV file.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks":
    get:
      tags:
        - Program Book
      summary: Lists all program books.
      description: Allows to retrieve a list of program books based on query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/ProjectLimit"
        - $ref: "#/components/parameters/ProjectOffset"
        - $ref: "#/components/parameters/IdQuery"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/OrderBy"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedPaginatedProgramBooks"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks/{id}":
    get:
      tags:
        - Program Book
      summary: Returns one specific program book.
      description: Allows to retrieve one specific program book based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/ProjectLimit"
        - $ref: "#/components/parameters/ProjectOffset"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Program Book
      summary: Updates one specific program book.
      description: Allows to update one specific program book based on the identifier. Returns the updated program book.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The updated program book content.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainProgramBook"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Program Book
      summary: Deletes a program book.
      description: Allows to delete a program book based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks/{id}/projects":
    get:
      tags:
        - Program Book
      summary: Retrieves a program book's projects.
      description: Allows to retrieve the list of projects in a program book.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    post:
      tags:
        - Program Book
      summary: Adds a project to the program book.
      description: Allows to add a project to the program book. Validates if the project can be integrated and returns it.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The project identifiers to be added to the program book.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectIdRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks/{id}/load":
    post:
      tags:
        - Program Book
      summary: Loads automatically a program book.
      description: Allows to load automatically a program book based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Chargement+automatique+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "202":
          description: Accepted
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  ? "/v1/programBooks/{programBookId}/priorityScenarios/{priorityScenarioId}/priorityLevels"
  : put:
      tags:
        - Priority
      description: Allows to modify the prioritization levels and get the ordered project list.
      parameters:
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathPriorityScenarioId"
      requestBody:
        description: The priorization levels definition.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/PlainPriorityLevel"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedPriorityLevel"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  ? "/v1/programBooks/{programBookId}/priorityScenarios/{priorityScenarioId}/calculations"
  : post:
      tags:
        - Priority
      description: Allows to get the updated ordered projects in a scenario. Allows sorting.
      parameters:
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathPriorityScenarioId"
        - $ref: "#/components/parameters/OrderBy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  ? "/v1/programBooks/{programBookId}/priorityScenarios/{priorityScenarioId}/orderedProjects"
  : get:
      tags:
        - Priority
      description: Allows to get the ordered projects in a scenario. Allows sorting.
      parameters:
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathPriorityScenarioId"
        - $ref: "#/components/parameters/ProjectOrderBy"
        - $ref: "#/components/parameters/ProjectLimit"
        - $ref: "#/components/parameters/ProjectOffset"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  ? "/v1/programBooks/{programBookId}/priorityScenarios/{priorityScenarioId}/orderedProjects/{projectId}/ranks"
  : put:
      tags:
        - Priority
      description: Allows to modify the rank of a project in the ordered project list.
      parameters:
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathPriorityScenarioId"
        - $ref: "#/components/parameters/PathProjectId"
      requestBody:
        description: The new rank of a project.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectRank"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProgramBook"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks/{programBookId}/objectives":
    post:
      tags:
        - Objective
      summary: Creates an objective for a program book based on the identifier.
      description: Allows to create an objective for a program book based on the identifier. Returns the created objective.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/PathProgramBookId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainObjective"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedObjective"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Objective
      summary: Retrieves all objectives associated with a program book based on the identifier.
      description: Allows to retrieve all objectives associated with a program book based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/PathProgramBookId"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedObjective"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/programBooks/{programBookId}/objectives/{id}":
    put:
      tags:
        - Objective
      summary: Updates an objective for a program book based on the identifiers.
      description: Allows to update an objective for a program book based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainObjective"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedObjective"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Objective
      summary: Deletes an objective for a program book based on the identifiers.
      description: Allows to delete an objective for a program book based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+carnets+de+programmation
      parameters:
        - $ref: "#/components/parameters/PathProgramBookId"
        - $ref: "#/components/parameters/PathId"
      responses:
        "204":
          description: No content
          content:
            application/json:
              schema:
                $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects":
    post:
      tags:
        - Project
      summary: Creates a project.
      description: Allows to create a project for one or many interventions.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The project to be created.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainProject"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Project
      summary: Lists all active projects.
      description: Allows to view/export a list of the active projects based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/excludeProgramBookIds"
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Ids"
        - $ref: "#/components/parameters/Bbox"
        - $ref: "#/components/parameters/BoroughId"
        - $ref: "#/components/parameters/Budget"
        - $ref: "#/components/parameters/FromBudget"
        - $ref: "#/components/parameters/ToBudget"
        - $ref: "#/components/parameters/CategoryId"
        - $ref: "#/components/parameters/EndYear"
        - $ref: "#/components/parameters/FromEndYear"
        - $ref: "#/components/parameters/ToEndYear"
        - $ref: "#/components/parameters/ExecutorId"
        - $ref: "#/components/parameters/FromYear"
        - $ref: "#/components/parameters/InChargeId"
        - $ref: "#/components/parameters/ProgramBookId"
        - $ref: "#/components/parameters/SubmissionNumber"
        - $ref: "#/components/parameters/ProjectTypeId"
        - $ref: "#/components/parameters/Q"
        - $ref: "#/components/parameters/StartYear"
        - $ref: "#/components/parameters/FromStartYear"
        - $ref: "#/components/parameters/ToStartYear"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/SubCategoryId"
        - $ref: "#/components/parameters/MedalId"
        - $ref: "#/components/parameters/InterventionProgramId"
        - $ref: "#/components/parameters/Expand"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/IsGeolocated"
        - $ref: "#/components/parameters/InterventionAssetTypeId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedPaginatedProjects"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}":
    get:
      tags:
        - Project
      summary: Returns one specific active project based on the identifier.
      description: Allows to view/export one specific active project based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Project
      summary: Modifies one specific active project based on the identifier.
      description: Allows to modify one specific active project by user changing status.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/ETag"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The project content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainProject"
      responses:
        "200":
          $ref: "#/components/schemas/PlainProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}/decisions":
    post:
      tags:
        - Project - Decision
      summary: Attaches a decision to an project, which change project status.
      description: Allows to add decision on a project.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The project decision to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectDecision"
      responses:
        "201":
          $ref: "#/components/schemas/EnrichedIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Project - Decision
      summary: Returns the decisions of a project.
      description: Allows to retrieve the decisions of a project.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectDecision"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
  "/v1/projects/{id}/documents":
    post:
      tags:
        - Project - Document
      summary: Attaches a required document to a project based on the identifier.
      description: >
        Allows to upload a document to a project based on the identifier. Proxies the storage API.
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      requestBody:
        description: The document multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainDocument"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedDocument"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}/documents/{documentId}":
    get:
      tags:
        - Project - Document
      summary: Downloads a project document based on the identifier.
      description: Downloads a project document based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "200":
          description: The binary of the document.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Project - Document
      summary: Updates a document to a project based on the identifiers.
      description: >
        Allows to modify the metadata and a document attached to a project based on the identifiers.
        Proxies the storage API.
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      requestBody:
        description: The document multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainDocument"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedDocument"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Project - Document
      summary: Deletes a specific document attached to a project based on the identifiers.
      description: Allows to delete a document on a project based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}/comments":
    post:
      tags:
        - Project - Comment
      summary: Creates a comment for a project based on the identifier.
      description: Creates a comment for a project based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The comment to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainComment"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Project - Comment
      summary: Lists all comments associated with a project based on the identifier.
      description: Lists all comments associated with a project based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment" #should be paginated
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}/comments/{idComment}":
    put:
      tags:
        - Project - Comment
      summary: Updates a comment for a project based on the identifiers.
      description: Updates a comment for a project based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathCommentId"
      responses:
        "200":
          description: The updated comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Project - Comment
      summary: Deletes a comment for a project based on the identifiers.
      description: Deletes a comment for a project based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathCommentId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/{id}/annualDistribution":
    put:
      tags:
        - Annual Distribution
      summary: Updates the project's annual distribution.
      description: Allows to modify the metadata and the annual distribution attached to a project.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The plain annual distribution to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainProjectAnnualDistribution"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/search":
    post:
      tags:
        - Project
      summary: Lists all active projects.
      description: Allows to filter all the existing projects.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      requestBody:
        description: The search parameter filter.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectPaginatedSearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedPaginatedProjects"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/countBy":
    get:
      tags:
        - Project
      summary: Gets a count of projects.
      description: Allows to get a filtered count of all projects by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      parameters:
        - $ref: "#/components/parameters/excludeProgramBookIds"
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/CountBy"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Bbox"
        - $ref: "#/components/parameters/BoroughId"
        - $ref: "#/components/parameters/Budget"
        - $ref: "#/components/parameters/FromBudget"
        - $ref: "#/components/parameters/ToBudget"
        - $ref: "#/components/parameters/CategoryId"
        - $ref: "#/components/parameters/EndYear"
        - $ref: "#/components/parameters/FromEndYear"
        - $ref: "#/components/parameters/ToEndYear"
        - $ref: "#/components/parameters/ExecutorId"
        - $ref: "#/components/parameters/FromYear"
        - $ref: "#/components/parameters/InChargeId"
        - $ref: "#/components/parameters/ProgramBookId"
        - $ref: "#/components/parameters/SubmissionNumber"
        - $ref: "#/components/parameters/ProjectTypeId"
        - $ref: "#/components/parameters/Q"
        - $ref: "#/components/parameters/StartYear"
        - $ref: "#/components/parameters/FromStartYear"
        - $ref: "#/components/parameters/ToStartYear"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/SubCategoryId"
        - $ref: "#/components/parameters/InterventionProgramId"
        - $ref: "#/components/parameters/IsGeolocated"
        - $ref: "#/components/parameters/InterventionAssetTypeId"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    post:
      tags:
        - Project
      summary: Gets a count of projects.
      description: Allows to get a filtered count of all projects by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets
      requestBody:
        description: The search parameter filter and the count key.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCountBySearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/generateDrmNumber":
    post:
      tags:
        - Project
      summary: Generates a common DRM number or different DRM numbers for the provided projects.
      description: Allows to generate a common DRM number or different DRM numbers for the provided projects.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=131927907
      requestBody:
        description: Project IDs for which a DRM number must be generated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InputDrmProject"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DrmProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/drmNumber":
    delete:
      tags:
        - Project
      summary: Deletes the DRM number for the provided projects.
      description: Allows to delete the DRM number for the provided projects.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=131927907
      parameters:
        - $ref: "#/components/parameters/Ids"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/projects/extract":
    post:
      tags:
        - Project
      summary: Extracts in an CSV file all the existing projects based on the search parameters.
      description: Allows to extract in an CSV file all the existing projects based on the search parameters.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=170200083
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The search parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectExtractSearchRequest"
      responses:
        "200":
          description: The binary of the CSV file.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/search/work-area":
    post:
      tags:
        - Search
      summary: Returns all surface areas combined in a geometry.
      description: Allows to find and combine all areas (intersections+pavements) that we can find inside a geometry.
      requestBody:
        description: The geometry filter.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geometry"
      parameters:
        - $ref: "#/components/parameters/LogicalLayers"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geometry"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/search/assets/work-area":
    post:
      tags:
        - Search
      summary: Returns the specific assets and all the surface areas combined in a geometry.
      description: Allows to return the assets information based on the identifiers and the asset type provided, ans all the surface areas combined in a geometry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetsWorkAreaSearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsWorkArea"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/taxonomies":
    get:
      tags:
        - Taxonomy
      summary: Recovers all the taxonomies object.
      description: Allows to retrieve all the taxonomies objects.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+de+la+taxonomie
      parameters:
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of taxonomies
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Taxonomy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    post:
      tags:
        - Taxonomy
      summary: Creates a taxonomy.
      description: Allows to create a taxonomy object.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+de+la+taxonomie
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The taxonomy object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Taxonomy"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Taxonomy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/taxonomies/{group}":
    get:
      tags:
        - Taxonomy
      summary: Recovers all the taxonomies objects for a specific group.
      description: Allows to retrieve all the taxonomies objects for a specific group.
      parameters:
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/PathTaxonomyGroup"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of taxonomies
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Taxonomy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/taxonomies/{group}/{code}":
    put:
      tags:
        - Taxonomy
      summary: Modifies one specific taxonomy object.
      description: Allows to modify one specific taxonomy object based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+de+la+taxonomie
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/ETag"
        - $ref: "#/components/parameters/PathTaxonomyGroup"
        - $ref: "#/components/parameters/PathTaxonomyCode"
      requestBody:
        description: The taxonomy object content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Taxonomy"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Taxonomy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Taxonomy
      summary: Deletes one taxonomy object.
      description: Allows to delete a taxonomy object.
      parameters:
        - $ref: "#/components/parameters/PathTaxonomyGroup"
        - $ref: "#/components/parameters/PathTaxonomyCode"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/assets/{assetType}/{assetId}":
    get:
      tags:
        - Asset
      summary: Returns one specific asset.
      description: Allows to retrieve the asset information based on the identifier and the asset type.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+actifs
      parameters:
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/PathAssetType"
        - $ref: "#/components/parameters/PathAssetId"
        - $ref: "#/components/parameters/Expand"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
  "/v1/assets/search":
    post:
      tags:
        - Asset
      summary: Returns all assets that fall within the specified criteria.
      description: Allows to retrieve all the existing assets that fall within the requested geometry.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+actifs
      parameters:
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        description: The asset search criteria.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAssetsRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/assets/search/lastIntervention":
    post:
      tags:
        - Asset
      summary: Retrieves the last intervention for each asset provided.
      description: Allows to retrieve the last intervention for each asset provided based on the search parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+actifs
      requestBody:
        description: The search parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetsLastInterventionSearchRequest"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AssetLastIntervention"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/import/internal/projects":
    post:
      tags:
        - Import
      summary: Imports a project from internal data source.
      description: Imports BIC projects to create a single AGIR project and deletes the old one if it already exists.
      requestBody:
        description: Object containing the BIC projects and the features of the project.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportProjectRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
      deprecated: true
  "/v1/import/bicImportLogs":
    post:
      tags:
        - BIC Import Log
      summary: Creates a BIC import log.
      description: Allows to create a BIC import log.
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BicImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - BIC Import Log
      summary: Lists all the BIC import logs.
      description: Allows to view a list of the BIC import logs based on the query parameters.
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedBicImportLogs"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/me":
    get:
      tags:
        - User
      summary: Gets the current user.
      description: Retrieves the current user information based on the provided authorization header.
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "200":
          description: Successful - returns the full response body of Keycloak.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden access
        "405":
          description: Invalid input
        "503":
          description: Unavailable
      security:
        - BearerAuth: []
  "/v1/me/preferences":
    get:
      tags:
        - User
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147819157
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EnrichedUserPreference"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
  "/v1/me/preferences/{key}":
    put:
      tags:
        - User
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147819157
      parameters:
        - $ref: "#/components/parameters/Key"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainUserPreference"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      tags:
        - User
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=147819157
      parameters:
        - $ref: "#/components/parameters/Key"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
  "/v1/nexoImports/file":
    post:
      tags:
        - NEXO Import
      summary: Uploads the first file of a NEXO import and instantiates a NEXO import.
      description: Allows to upload the first file of a NEXO import and instantiates a NEXO import.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The NEXO import file multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainNexoImportFile"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NexoImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/nexoImports/{id}/import":
    post:
      tags:
        - NEXO Import
      summary: Starts a NEXO import.
      description: Allows to start a NEXO import based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NexoImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/nexoImports":
    get:
      tags:
        - NEXO Import
      summary: Lists all NEXO imports.
      description: Allows to list NEXO imports based on query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/NexoImportStatus"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of NEXO imports
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/NexoImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/nexoImports/{id}":
    get:
      tags:
        - NEXO Import
      summary: Retrieves a NEXO import.
      description: Allows to retrieve a NEXO import based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NexoImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/nexoImports/{id}/file":
    put:
      tags:
        - NEXO Import
      summary: Uploads an additional file for a NEXO import.
      description: Allows to upload an additional file for a NEXO import based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The NEXO import file multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PlainNexoImportFile"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NexoImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/nexoImports/{id}/file/{fileId}":
    get:
      tags:
        - NEXO Import
      summary: Retrieves a NEXO import file.
      description: Allows to retrieve a specific NEXO import file based on the identifiers.
      externalDocs:
        url: https://confluence.montreal.ca/pages/viewpage.action?pageId=129598401
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/PathFileId"
      responses:
        "200":
          description: Successful
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/PlainNexoImportFile"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/import/rtu/projects":
    post:
      tags:
        - Info-RTU Import
      summary: Starts an Info-RTU import.
      description: Allows to start an Info-RTU import.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Importation+des+projets+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "202":
          description: Accepted
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuProjects":
    get:
      tags:
        - RTU Project
      summary: Retrieves all RTU projects.
      description: Allows to retrieve all RTU projects based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Ids"
        - $ref: "#/components/parameters/Bbox"
        - $ref: "#/components/parameters/AreaId"
        - $ref: "#/components/parameters/PartnerId"
        - $ref: "#/components/parameters/RtuStatus"
        - $ref: "#/components/parameters/Phase"
        - $ref: "#/components/parameters/FromDateStart"
        - $ref: "#/components/parameters/ToDateStart"
        - $ref: "#/components/parameters/FromDateEnd"
        - $ref: "#/components/parameters/ToDateEnd"
        - $ref: "#/components/parameters/Fields"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRtuProjects"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuProjects/{id}":
    get:
      tags:
        - RTU Project
      summary: Returns one specific RTU project based on the identifier.
      description: Allows to retrieve one specific RTU project based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RtuProject"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuProjects/countBy":
    get:
      tags:
        - RTU Project
      summary: Gets a count of RTU projects.
      description: Allows to get a filtered count of all RTU projects by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/CountBy"
        - $ref: "#/components/parameters/AreaId"
        - $ref: "#/components/parameters/PartnerId"
        - $ref: "#/components/parameters/RtuStatus"
        - $ref: "#/components/parameters/Phase"
        - $ref: "#/components/parameters/FromDateStart"
        - $ref: "#/components/parameters/ToDateStart"
        - $ref: "#/components/parameters/FromDateEnd"
        - $ref: "#/components/parameters/ToDateEnd"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuProjects/search":
    post:
      tags:
        - RTU Project
      summary: Retrieves all RTU projects.
      description: Allows to retrieve all RTU projects based on the search criterias.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+projets+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The search criterias.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RtuProjectSearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRtuProjects"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/export/projects":
    post:
      tags:
        - Info-RTU Export
      summary: Starts an export to Info-RTU.
      description: Allows to start an export to Info-RTU.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Exportation+des+projets+AGIR-Planification+vers+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "202":
          description: Accepted
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "409":
          $ref: "#/components/responses/Conflict"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuExportLogs":
    get:
      tags:
        - Info-RTU Export Log
      summary: Lists all the Info-RTU export logs.
      description: Allows to view a list of the Info-RTU export logs based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+logs+d%27exportation+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Fields"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of Info-RTU export logs
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/RtuExportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuExportLogs/{id}":
    get:
      tags:
        - Info-RTU Export Log
      summary: Returns one specific Info-RTU export log based on the identifier.
      description: Allows to retrieve one specific Info-RTU export log based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+logs+d%27exportation+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RtuExportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuImportLogs":
    get:
      tags:
        - Info-RTU Import Log
      summary: Lists all the Info-RTU import logs.
      description: Allows to view a list of the Info-RTU import logs based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+logs+d%27importation+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Fields"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of Info-RTU import logs
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/RtuImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/rtuImportLogs/{id}":
    get:
      tags:
        - Info-RTU Import Log
      summary: Returns one specific Info-RTU import log based on the identifier.
      description: Allows to retrieve one specific Info-RTU import log based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+logs+d%27importation+Info-RTU
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RtuImportLog"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/requirements":
    post:
      tags:
        - Requirement
      summary: Creates a requirement.
      description: Allows to create a requirement.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+exigences
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The requirement content to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainRequirement"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Requirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Requirement
      summary: Retrieves all requirements.
      description: Allows to retrieve all requirements based on the query parameters.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+exigences
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/Fields"
        - $ref: "#/components/parameters/ItemId"
        - $ref: "#/components/parameters/ItemType"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of Requirements
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Requirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/requirements/{id}":
    put:
      tags:
        - Requirement
      summary: Modifies one specific requirement based on the identifier.
      description: Allows to modify one specific requirement based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+exigences
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      requestBody:
        description: The requirement content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlainRequirement"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Requirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Requirement
      summary: Deletes one specific requirement based on the identifier.
      description: Allows to delete one specific requirement based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+exigences
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions":
    post:
      tags:
        - Submission
      summary: Creates a submission.
      description: Allows to create a submission.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The submission to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionCreateRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/search":
    post:
      tags:
        - Submission
      summary: Retrieves all submissions.
      description: Allows to retrieve all submissions based on the search criterias.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The search criterias.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionsSearchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
                description: A paginated collection of Submissions
                properties:
                  paging:
                    $ref: "#/components/schemas/Paging"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/countBy":
    get:
      tags:
        - Submission
      summary: Gets a count of submissions.
      description: Allows to get a filtered count of all submissions by a count key.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/CountBy"
        - $ref: "#/components/parameters/DrmNumber"
        - $ref: "#/components/parameters/ProgramBookId"
        - $ref: "#/components/parameters/ProjectId"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/ProgressStatus"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CountBy"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}":
    patch:
      tags:
        - Submission
      summary: Modifies one specific submission based on the submission number.
      description: Allows to modify one specific submission based on the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/PathSubmissionNumber"
      requestBody:
        description: The submission content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionPatchRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    get:
      tags:
        - Submission
      summary: Retrieves one specific submission based on the identifier.
      description: Allows to retrieve one specific submission based on the identifier.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Accept"
        - $ref: "#/components/parameters/Accept-Language"
        - $ref: "#/components/parameters/PathSubmissionNumber"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/add/project/{id}":
    post:
      tags:
        - Submission
      summary: Add one specific project to a specific submission.
      description: Allows to add one specific project to a specific submission based on the identifier and the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/remove/project/{id}":
    post:
      tags:
        - Submission
      summary: Removes one specific project from a specific submission.
      description: Allows to remove one specific project from a specific submission based on the identifier and the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/documents":
    post:
      tags:
        - Submission - Document
      summary: Attaches a document to submission based on the identifier.
      description: >
        Allows to upload a document to submission based on the identifier. Proxies the storage API.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/Content-Type"
        - $ref: "#/components/parameters/PathSubmissionNumber"
      requestBody:
        description: The document multipart.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SubmissionDocumentRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnrichedDocument"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/requirements":
    post:
      tags:
        - Submission
      summary: Adds a requirement to a specific submission.
      description: Allows to add a requirement to a specific submission based on the submission number.
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The requirement to add.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequirementRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionRequirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/requirements/{id}":
    put:
      tags:
        - Submission
      summary: Modifies one specific requirement of a specific submission.
      description: Allows to modify one specific requirement of a specific submission based on the identifier and the submission number.
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        description: The requirement content to be modified.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionRequirementRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionRequirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Submission
      summary: Deletes one specific requirement of a specific submission.
      description: Allows to delete one specific requirement of a specific submission based on the identifier and the submission number.
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    patch:
      tags:
        - Submission
      summary: Makes obsolete or undo one specific requirement of a specific submission.
      description: Allows to make obsolete or undo one specific requirement of a specific submission based on the identifier and the submission number.
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Content-Type"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDeprecated:
                  type: boolean
                  description: Indicates whether the requirement is obsolete or not.
              required:
                - isDeprecated
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionRequirement"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
  "/v1/submissions/{submissionNumber}/documents/{documentId}":
    get:
      tags:
        - Submission - Document
      summary: Downloads a submission document based on the identifier and the submission number.
      description: Allows to downloads a submission document based on the identifier and the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "200":
          description: The binary of the document.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    put:
      tags:
        - Submission - Document
      summary: Modifies one specific document of a specific submission.
      description: Allows to modify one specific document of a specific submission based on the identifier and the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/PathDocumentId"
      requestBody:
        description: The document content to be modified.
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SubmissionDocumentRequest"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
    delete:
      tags:
        - Submission - Document
      summary: Removes one specific document from a specific submission.
      description: Allows to remove one specific document from a specific submission based on the identifier and the submission number.
      externalDocs:
        url: https://confluence.montreal.ca/display/AGIR/Gestion+des+soumissions
      parameters:
        - $ref: "#/components/parameters/PathSubmissionNumber"
        - $ref: "#/components/parameters/PathDocumentId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/InvalidInput"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/UnexpectedError"
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OpenID:
      type: openIdConnect
      openIdConnectUrl: "https://auth.montreal.ca/oxauth/.well-known/openid-configuration"
  parameters:
    InterventionAssetTypeId:
        in: query
        name: interventionAssetTypeId
        description: Code(s) of the taxonomy corresponding to the group assetType.
        schema:
          $ref: "#/components/schemas/StringOrStringArray"
    excludeProgramBookIds:
        in: query
        name: excludeProgramBookIds
        description: The program book ID excluded
        schema:
          $ref: "#/components/schemas/StringOrStringArray"
    QueryId:
      in: query
      name: id
      description: the id of the resource
      schema:
        $ref: "#/components/schemas/Uuid"
      required: false
    Year:
      in: query
      name: year
      required: false
      description: The resource year
      schema:
        type: integer
        pattern: '^\d{4}$'
    FromYear:
      in: query
      name: fromYear
      required: false
      description: Lower bound of the resource year
      schema:
        type: integer
        pattern: '^\d{4}$'
    ToYear:
      in: query
      name: toYear
      required: false
      description: Upper bound of the resource year
      schema:
        type: integer
        pattern: '^\d{4}$'
    AnnualProgramStatus:
      in: query
      name: status
      description: The annual program status
      required: false
      schema:
        type: string
    PathFileId:
      in: path
      name: fileId
      description: The identifier of the resource
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    NexoImportStatus:
      in: query
      name: status
      required: false
      description: The Nexo import status
      schema:
        type: string
    PathAssetId:
      in: path
      name: assetId
      description: The asset\'s identifier
      required: true
      schema:
        type: string
    PathAssetType:
      in: path
      name: assetType
      description: The asset\'s type
      required: true
      schema:
        type: string
    PathCommentId:
      in: path
      name: idComment
      description: The identifier of the resource
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathDocumentId:
      in: path
      name: documentId
      description: The identifier of the resource
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathId:
      in: path
      name: id
      description: The identifier of the resource
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathInterventionId:
      in: path
      name: interventionId
      description: The intervention\'s identifier
      required: true
      schema:
        type: string
    PathNoteId:
      in: path
      name: noteId
      description: The identifier of the resource
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathProgramBookId:
      in: path
      name: programBookId
      description: The program book\'s identifier
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathProjectId:
      in: path
      name: projectId
      description: The project\'s identifier
      required: true
      schema:
        type: string
    PathPriorityScenarioId:
      in: path
      name: priorityScenarioId
      description: The priority scenario\'s identifier
      required: true
      schema:
        $ref: "#/components/schemas/Uuid"
    PathTaxonomyGroup:
      in: path
      name: group
      description: The taxonomy group
      required: true
      schema:
        type: string
    PathTaxonomyCode:
      in: path
      name: code
      description: The taxonomy code
      required: true
      schema:
        type: string
    Id:
      in: path
      name: id
      description: the id of the resource
      schema:
        $ref: "#/components/schemas/Uuid"
      required: true
    Ids:
      in: query
      name: id
      description: the id of the resource
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
      required: false
    ObjectId:
      in: path
      name: objectId
      description: the id of the object in the object storage
      schema:
        $ref: "#/components/schemas/Uuid"
      required: true
    Accept:
      in: header
      name: accept
      description: the returned format
      schema:
        type: string
        default: application/json
        enum:
          - application/json
          - application/sql
          - text/csv
          - application/pdf
    Accept-Language:
      name: Accept-Language
      in: header
      description: The language code
      required: true
      schema:
        type: string
        default: fr
        enum:
          - fr
          - en
    AssetId:
      name: assetId
      in: query
      description: The asset ID
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    AssetOwnerId:
      name: assetOwnerId
      in: query
      description: The asset owner ID
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    AssetTypeId:
      name: assetTypeId
      in: query
      description: The asset type ID
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Bbox:
      name: bbox
      in: query
      description: "The request bounding box (lower bounds - SWL, upper bounds NEU)"
      required: false
      schema:
        type: string
        description: Comma separated list of coordinates
    BoroughId:
      in: query
      name: boroughId
      description: The borough ID
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    DecisionTypeId:
      in: query
      name: decisionTypeId
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Budget:
      in: query
      name: budget
      description: The budget in thousands of CAD dollars
      schema:
        type: number
    FromBudget:
      in: query
      name: fromBudget
      description: Lower bound of the budget in thousands of CAD dollars
      schema:
        type: number
    ToBudget:
      in: query
      name: toBudget
      description: Upper bound of the budget in thousands of CAD dollars
      schema:
        type: number
    CategoryId:
      in: query
      name: categoryId
      description: The category ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    ProjectId:
      in: query
      name: projectId
      description: The project ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Content-Type:
      name: content-type
      in: header
      description: the input format
      schema:
        type: string
        default: application/json
        enum:
          - application/json
          - multipart/form-data
    ContinuationToken:
      in: query
      name: after
      required: false
      schema:
        $ref: "#/components/schemas/ContinuationToken"
    CountBy:
      in: query
      name: countBy
      required: false
      description: |
        Specifies the key to count the results by, for example:
        boroughId
      schema:
        type: string
    Date:
      in: query
      name: date
      required: false
      description: Search by date
      schema:
        type: string
        pattern: '([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'
    EndYear:
      in: query
      name: endYear
      description: The end year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    FromEndYear:
      in: query
      name: fromEndYear
      description: Lower bound of the end year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ToEndYear:
      in: query
      name: toEndYear
      description: Upper bound of the end year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ETag:
      name: if-match
      in: header
      description: the version
      schema:
        type: integer
    Estimate:
      in: query
      name: estimate
      description: The cost estimate in thousands of CAD dollars
      schema:
        type: integer
    FromEstimate:
      in: query
      name: fromEstimate
      description: Lower bound of the cost estimate in thousands of CAD dollars
      schema:
        type: number
    ToEstimate:
      in: query
      name: toEstimate
      description: Upper bound of the cost estimate in thousands of CAD dollars
      schema:
        type: number
    ExecutorId:
      in: query
      name: executorId
      description: The executor ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Expand:
      in: query
      name: expand
      description: Adds additional properties.
      schema:
        type: array
        items:
          type: string
    Fields:
      in: query
      name: fields
      required: false
      description: Comma separated list of fields/attributes to return
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    InChargeId:
      in: query
      name: inChargeId
      description: The ID of the person in charge of the project
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    InterventionAreaBbox:
      in: query
      name: interventionAreaBbox
      description: "The request bounding box (lower bounds - SWL, upper bounds NEU)"
      required: false
      schema:
        type: string
        description: Comma separated list of coordinates
    InterventionTypeId:
      in: query
      name: type
      required: false
      description: The intervention type ID
      schema:
        type: string
        enum:
          - intervention
          - followup
          - opportunity
    InterventionYear:
      in: query
      name: interventionYear
      description: The intervention year
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    FromInterventionYear:
      in: query
      name: fromInterventionYear
      description: Lower bound of the intervention year
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ToInterventionYear:
      in: query
      name: toInterventionYear
      description: Upper bound of the intervention year
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    Limit:
      in: query
      name: limit
      required: false
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100000
        default: 20
    ProjectLimit:
      in: query
      name: projectLimit
      required: false
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100000
        default: 20
    LogicalLayers:
      in: query
      name: layers
      schema:
        type: array
        items:
          enum:
            - horticulture
            - eau
            - etc.
    MedalId:
      in: query
      name: medalId
      required: false
      description: The medal ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Offset:
      in: query
      name: offset
      required: false
      description: The result offset for pagination.
      schema:
        type: integer
        minimum: 1
    ProjectOffset:
      in: query
      name: projectOffset
      required: false
      description: The result offset for pagination.
      schema:
        type: integer
        minimum: 1
    OrderBy:
      in: query
      name: orderBy
      required: false
      description: |
        Sort results, for example:
        -estimate,-priority
      schema:
        type: string
    ProjectOrderBy:
      in: query
      name: projectOrderBy
      required: false
      description: |
        Sort results, for example:
        -rank,-initialRank
      schema:
        type: string
    PlanificationYear:
      in: query
      name: planificationYear
      description: The planned year of the interventions
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    FromPlanificationYear:
      in: query
      name: fromPlanificationYear
      description: Lower bound of the planned year of the interventions
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ToPlanificationYear:
      in: query
      name: toPlanificationYear
      description: Upper bound of the planned year of the interventions
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ProgramId:
      in: query
      name: programId
      description: The program ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    ProgramBookId:
      in: query
      name: programBookId
      description: The program book ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Project:
      in: query
      name: project
      description: The intervention project type ID. The only possible values are null or undefined. Allows to filter interventions without projects.
      example: null
      schema:
        type: string
    ProjectTypeId:
      in: query
      name: projectTypeId
      description: The project type ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Q:
      in: query
      name: q
      required: false
      description: FullText search (interventionId, interventionName, projectId, projectName, drmNumber, submissionNumber)
      schema:
        type: string
    ReferenceId:
      in: query
      name: referenceId
      required: false
      description: For the intervention or the project
      schema:
        type: string
    RequestorId:
      in: query
      name: requestorId
      description: The requestor ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    StartYear:
      in: query
      name: startYear
      description: The start year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    FromStartYear:
      in: query
      name: fromStartYear
      description: Lower bound of the start year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    ToStartYear:
      in: query
      name: toStartYear
      description: Upper bound of the start year of the project
      required: false
      schema:
        type: integer
        pattern: '^\d{4}$'
    Status:
      in: query
      name: status
      required: false
      description: The status
      schema:
        type: string
        enum:
          - created
          - submitted
          - planned
          - integrated
          - ordered
          - inDesign
          - inRealization
          - worked
          - archived
          - reported
          - replanned
          - canceled
          - deleted
    ProgressStatus:
      in: query
      name: progressStatus
      required: false
      schema:
        type: string
    SubCategoryId:
      in: query
      name: subCategoryId
      description: The sub-category ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    InterventionProgramId:
      in: query
      name: interventionProgramId
      description: Code(s) of the taxonomy corresponding to the group programType
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    IsGeolocated:
      in: query
      name: isGeolocated
      description: Boolean whether the request should only return non-geolocated or geolocated projects
      required: false
      schema:
        type: boolean
    TaxonomyCode:
      name: taxonomyCode
      in: query
      description: "The taxonomyCode: WorkType, Requestor, Borough, Status, etc."
      required: true
      schema:
        type: string
    TaxonomyCodeQuery:
      name: taxonomyCode
      in: query
      description: "The taxonomyCode: WorkType, Requestor, Borough, Status, etc."
      schema:
        type: string
    TermId:
      in: path
      name: termId
      description: The taxonomy term ID
      required: true
      schema:
        type: string
    TermCode:
      in: query
      name: termCode
      description: "The termCode: rehab, rtu, vdm, created, etc."
      schema:
        type: string
    WorkTypeId:
      in: query
      name: workTypeId
      description: The type of work ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Key:
      in: path
      name: key
      description: the unique key of the resource
      required: true
      schema:
        type: string
    AreaId:
      in: query
      name: areaId
      required: false
      description: The area ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    PartnerId:
      in: query
      name: partnerId
      required: false
      description: The partner ID
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    RtuStatus:
      in: query
      name: status
      required: false
      description: The status
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    Phase:
      in: query
      name: phase
      required: false
      description: The phase
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    FromDateStart:
      in: query
      name: fromDateStart
      required: false
      description: Lower bound of the start date of the project
      schema:
        $ref: "#/components/schemas/Date"
    ToDateStart:
      in: query
      name: toDateStart
      required: false
      description: Upper bound of the start date of the project
      schema:
        $ref: "#/components/schemas/Date"
    FromDateEnd:
      in: query
      name: fromDateEnd
      required: false
      description: Lower bound of the end date of the project
      schema:
        $ref: "#/components/schemas/Date"
    ToDateEnd:
      in: query
      name: toDateEnd
      required: false
      description: Upper bound of the end date of the project
      schema:
        $ref: "#/components/schemas/Date"
    DrmNumber:
      in: query
      name: drmNumber
      description: drm number(s)
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    SubmissionNumber:
      in: query
      name: submissionNumber
      description: Submission number(s)
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    IdQuery:
      in: query
      name: id
      description: The id of the resource
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    ItemId:
      in: query
      name: itemId
      description: The identifier of the requirement item.
      required: false
      schema:
        $ref: "#/components/schemas/StringOrStringArray"
    ItemType:
      in: query
      name: itemType
      description: The requirement item type.
      required: false
      schema:
        type: string
    PathSubmissionNumber:
      in: path
      name: submissionNumber
      description: The submission number
      required: true
      schema:
        type: string
    DecisionRequired:
      in: query
      name: decisionRequired
      description: Whether the intervention has a decision required
      required: false
      schema:
        type: boolean
  responses:
    Created:
      description: The resource has been created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Created"
    Accepted:
      description: The resource was deleted
    NoContent:
      description: No content
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InvalidRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InvalidInput:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnprocessableEntity:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    DiagnosticsInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
      required:
        - name
        - description
        - version
    ConflictualType:
      type: string
      enum:
        - intervention
        - project
      description: Is a enum of intervention or a project
      example: intervention
    ConflictualItem:
      type: object
      description: "a conflictualItem write - read - "
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ConflictualType"
      required:
        - id
        - type
    History:
      type: object
      description: history for intervention and project
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        objectTypeId:
          type: string
          description: This is type of the element the constraint is affected
          enum:
            - project
            - intervention
        referenceId:
          type: string
        actionId:
          type: string
          enum:
            - create
            - update
            - delete
        categoryId:
          type: string
          description: This is type of modification like constraint
        summary:
          $ref: "#/components/schemas/HistorySummary"
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - objectTypeId
        - referenceId
        - actionId
        - summary
    PlainIntervention:
      allOf:
        - description: a plain intervention feature write - for taxonomyCode read -
        - $ref: "#/components/schemas/BaseIntervention"
        - properties:
            interventionName:
              type: string
              description: Nom de l'intervention
              example: Réparation borne d'incendie 2029
            interventionTypeId:
              type: string
              description: >-
                code de taxonomie appartenant au groupe GROUPE_TAXO (follow-up,
                intervention)
              example: follow-up
            workTypeId:
              type: string
              description: >-
                code de taxonomie appartenant au groupe GROUPE_TAXO (construction or
                rehabilitation)
              example: construction
            requestorId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            boroughId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            status:
              description: reinforced (populated && || validated) by the state machine
              type: string
            interventionYear:
              type: integer
              description: year the intervention is done
              example: 2021
              minimum: 2000
              maximum: 3000
            planificationYear:
              type: integer
              description: year the intervention is planned
              example: 2021
              minimum: 2000
              maximum: 3000
            endYear:
              type: integer
              description: year the intervention is supposedly completed
              example: 2021
              minimum: 2000
              maximum: 3000
            estimate:
              type: number
              description: the initial work estimate in dollars
              example: 100000
            programId:
              type: string
              description: code de taxonomie appartenant au groupe programType
            contact:
              description: >-
                the contact for the intervention (text field for v1), the user
                identity by default as of v2 ++
              type: string
            assets:
              type: array
              items:
                $ref: "#/components/schemas/Asset"
            interventionArea:
              $ref: "#/components/schemas/InterventionArea"
            roadSections:
              $ref: "#/components/schemas/FeatureCollection"
            importFlag:
              type: string
            decisionRequired:
              type: boolean
            audit:
              $ref: "#/components/schemas/Audit"
      required:
        - interventionName
        - interventionTypeId
        - workTypeId
        - requestorId
        - boroughId
        - interventionYear
        - planificationYear
        - estimate
        - assets
        - interventionArea
    PlainPaginatedInterventions:
      type: object
      description: a paginated collection of interventions
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/PlainIntervention"
    EnrichedAnnualProgram:
      type: object
      description: An enriched annual program
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        executorId:
          type: string
          description: The identifier of the executor. Comes from taxonomies.
          example: di
        year:
          type: number
          description: The annual program's year.
          example: 2021
        description:
          type: string
          description: The annual program's description
          example: Programmation annuelle pour la Direction des Infrastructures
        budgetCap:
          type: number
          description: The maximum budget cap in thousands of dollars for a project to be in the program book.
          example: 2000
        sharedRoles:
          type: array
          items:
            type: string
        programBooks:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedProgramBook"
        status:
          type: string
          description: The annual program's status.
          example: new
        audit:
          $ref: "#/components/schemas/Audit"
        limitedAccess:
          type: boolean
          description:
            Tells whether the user has limited access to this annual program.
            Usually true when the user can see a program book but not the annual program info.
            When true only the id, executorId and the year are returned.
      required:
        - id
        - executorId
        - year
        - budgetCap
        - status
        - audit
    BaseIntervention:
      type: object
      properties:
        id:
          type: string
        executorId:
          type: string
          description: must be a taxonomy code that belongs to group executor
        externalReferenceIds:
          type: array
          items:
            $ref: "#/components/schemas/ExternalReferenceId"
        medalId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        importRevisionDate:
          type: string
      required:
        - executorId
    EnrichedIntervention:
      allOf:
        - description: an enriched intervention feature
        - $ref: "#/components/schemas/BaseIntervention"
        - properties:
            interventionName:
              type: string
              description: Nom de l'intervention
              example: Réparation borne d'incendie 2029
            interventionTypeId:
              type: string
              description: >-
                code de taxonomie appartenant au groupe GROUPE_TAXO (follow-up,
                intervention)
              example: follow-up
            workTypeId:
              type: string
              description: >-
                code de taxonomie appartenant au groupe GROUPE_TAXO (construction or
                rehabilitation)
              example: construction
            requestorId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            boroughId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            status:
              description: reinforced (populated && || validated) by the state machine
              type: string
            interventionYear:
              type: integer
              description: year the intervention is done
              example: 2021
              minimum: 2000
              maximum: 3000
            planificationYear:
              type: integer
              description: year the intervention is planned
              example: 2021
              minimum: 2000
              maximum: 3000
            endYear:
              type: integer
              description: year the intervention is supposedly completed
              example: 2021
              minimum: 2000
              maximum: 3000
            programId:
              type: string
              description: code de taxonomie appartenant au groupe programType
            contact:
              description: >-
                the contact for the intervention (text field for v1), the user
                identity by default as of v2 ++
              type: string
            assets:
              type: array
              items:
                $ref: "#/components/schemas/Asset"
            interventionArea:
              $ref: "#/components/schemas/InterventionArea"
            roadSections:
              $ref: "#/components/schemas/FeatureCollection"
            importFlag:
              type: string
            version:
              type: integer
            estimate:
              $ref: "#/components/schemas/Budget"
            annualDistribution:
              $ref: "#/components/schemas/InterventionAnnualDistribution"
            project:
              $ref: "#/components/schemas/Project"
            documents:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedDocument"
            decisions:
              type: array
              items:
                $ref: "#/components/schemas/InterventionDecision"
            decisionRequired:
              type: boolean
            audit:
              $ref: "#/components/schemas/Audit"
            streetName:
              type: string
              description: Suggested street name
            streetFrom:
              type: string
              description: From limit of the street name
            streetTo:
              type: string
              description: To limit of the street name
            roadNetworkTypeId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            moreInformationAudit:
              $ref: "#/components/schemas/Audit"
            comments:
              type: array
              items:
                $ref: "#/components/schemas/Comment"
            designData:
              $ref: "#/components/schemas/DesignData"
      required:
        - interventionName
        - interventionTypeId
        - workTypeId
        - requestorId
        - boroughId
        - interventionYear
        - planificationYear
        - estimate
        - assets
        - interventionArea
        - audit
    EnrichedPaginatedInterventions:
      type: object
      description: a paginated collection of interventions
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedIntervention"
    EnrichedProgramBook:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            annualProgramId:
              $ref: "#/components/schemas/Uuid"
        - $ref: "#/components/schemas/PlainProgramBook"
        - description: The enriched program book
          properties:
            audit:
              $ref: "#/components/schemas/Audit"
            annualProgram:
              $ref: "#/components/schemas/EnrichedAnnualProgram"
            objectives:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedObjective"
            projects:
              $ref: "#/components/schemas/EnrichedPaginatedProjects"
            removedProjects:
              $ref: "#/components/schemas/EnrichedPaginatedProjects"
            removedProjectsIds:
              type: array
              description: An array of removed projects ids for this book.
              items:
                type: string
            priorityScenarios:
              type: array
              items:
                $ref: "#/components/schemas/PriorityScenario"
            isAutomaticLoadingInProgress:
              type: boolean
              description: Indicates whether an automatic loading is in progress or not.
          required:
            - id
            - status
            - annualProgramId
            - audit
    EnrichedPaginatedProgramBooks:
      type: object
      description: a paginated collection of program books
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedProgramBook"
    EnrichedInterventionHistory:
      type: array
      description: the list of enriched content of an historical intervention feature
      items:
        $ref: "#/components/schemas/EnrichedIntervention"
    PlainAnnualProgram:
      type: object
      description: An enriched annual program
      properties:
        executorId:
          type: string
          description: The identifier of the executor. Comes from taxonomies.
          example: di
        year:
          type: number
          description: The annual program's year.
          example: 2021
        description:
          type: string
          description: The annual program's description
          example: Programmation annuelle pour la Direction des Infrastructures
        budgetCap:
          type: number
          description: The maximum budget cap in thousands of dollars for a project to be in the program book.
          example: 2000
        sharedRoles:
          type: array
          items:
            type: string
        status:
          type: string
          description: The annual program's status.
          example: new
      required:
        - executorId
        - year
        - budgetCap
    PlainProgramBook:
      type: object
      description: The plain version program book
      properties:
        name:
          type: string
          description: The name of the program book
          example: Carnet PI
        projectTypes:
          type: array
          description: An array of the possible project types for this book. Acceptable values come from taxonomies.
          example: ["integrated", "nonIntegrated"]
          items:
            type: string
        inCharge:
          type: string
          example: Olivier Chevrel
          description: The name of the person in charge of the program book. Free text field.
        boroughIds:
          type: array
          description: An array of the possible boroughs for this book. Values from taxonomies.
          example: ["AC", "SO"]
          items:
            type: string
        sharedRoles:
          type: array
          description: A roles array that can see the program book
          example: ["ADMIN", "PILOT"]
          items:
            type: string
        status:
          type: string
          description: The status of the program book. Value from taxonomies.
          example: new
        programTypes:
          type: array
          description: An array of the possible programs for this book. Values from the taxonomy group programType.
          example: ["sae", "pcpr"]
          items:
            type: string
        description:
          type: string
          description: The description of the program book
      required:
        - name
        - projectTypes
    BaseProject:
      type: object
      properties:
        id:
          type: string
          description: The project identifier
        boroughId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        endYear:
          type: integer
          description: year the project ends
          example: 2022
          minimum: 2000
          maximum: 3000
        executorId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        externalReferenceIds:
          type: array
          items:
            $ref: "#/components/schemas/ExternalReferenceId"
        geometry:
          $ref: "#/components/schemas/Geometry"
        globalBudget:
          $ref: "#/components/schemas/Budget"
        importFlag:
          type: string
        inChargeId:
          type: string
          description: Someone in charge of this project. Corresponds to requestors taxonomies
        interventionIds:
          type: array
          items:
            type: string
        servicePriorities:
          type: array
          items:
            $ref: "#/components/schemas/ServicePriority"
        projectName:
          type: string
          description: description du projet
        projectTypeId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        riskId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        startYear:
          type: integer
          description: year the project starts
          example: 2021
          minimum: 2000
          maximum: 3000
        status:
          type: string
          description: taxonomy code that belong to projectStatus group
        streetName:
          type: string
          description: Suggested street name
        subCategoryIds:
          type: array
          description: taxonomy code that belong to projectSubCategory group
          items:
            type: string
    PlainProject:
      allOf:
        - description: a plain project feature
        - $ref: "#/components/schemas/BaseProject"
        - properties:
            annualPeriods:
              type: array
              items:
                $ref: "#/components/schemas/PlainProjectAnnualPeriod"
            annualProjectDistributionSummary:
              $ref: "#/components/schemas/PlainProjectAnnualDistributionSummary"
      required:
        - boroughId
        - executorId
        - startYear
        - endYear
    PlainPaginatedProjects:
      type: object
      description: a paginated collection of plain projects
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/PlainProject"
    InputDrmProject:
      type: object
      properties:
        projectIds:
          type: array
          items:
            type: string
        isCommonDrmNumber:
          type: boolean
      required:
        - projectIds
        - isCommonDrmNumber
    DrmProject:
      type: object
      properties:
        projectId:
          type: string
        drmNumber:
          type: string
      required:
        - projectId
        - drmNumber
    RtuExport:
      type: object
      properties:
        status:
          type: string
        exportAt:
          $ref: "#/components/schemas/Date"
    EnrichedProject:
      allOf:
        - description: an enriched project feature
        - $ref: "#/components/schemas/BaseProject"
        - properties:
            audit:
              $ref: "#/components/schemas/Audit"
            moreInformationAudit:
              $ref: "#/components/schemas/Audit"
            annualDistribution:
              $ref: "#/components/schemas/EnrichedProjectAnnualDistribution"
            contact:
              type: string
              example: Jean Girard
            decisions:
              type: array
              items:
                $ref: "#/components/schemas/ProjectDecision"
            documents:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedDocument"
            geometryPin:
              $ref: "#/components/schemas/Point"
            interventions:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedIntervention"
            length:
              $ref: "#/components/schemas/Length"
            medalId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            roadNetworkTypeId:
              type: string
              description: code de taxonomie appartenant au groupe GROUPE_TAXO
            streetFrom:
              type: string
              description: From limit of the street name
            streetTo:
              type: string
              description: To limit of the street name
            isOpportunityAnalysis:
              type: boolean
              description: There is at least one opportunity notice created
            drmNumber:
              type: string
              description: The DRM number
            submissionNumber:
              type: string
              description: The submission number
            rtuExport:
              $ref: "#/components/schemas/RtuExport"
            comments:
              type: array
              items:
                $ref: "#/components/schemas/Comment"
    EnrichedPaginatedProjects:
      type: object
      description: a paginated collection of enriched projects
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedProject"
    EnrichedProjectAnnualDistribution:
      type: object
      properties:
        distributionSummary:
          $ref: "#/components/schemas/AnnualProjectDistributionSummary"
        annualPeriods:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedProjectAnnualPeriod"
    AnnualProjectDistributionSummary:
      type: object
      properties:
        totalBudget:
          type: number
          description: >
            calculated.
            the sum of the interventions total budget and additional costs total
            budget.
          format: amount
        additionalCostTotals:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalCostsTotalAmount"
        totalAdditionalCosts:
          type: number
          description: >
            calculated.
            the sum of the additional costs total
            budget.
          format: amount
        totalInterventionBudgets:
          type: number
          description: >
            calculated.
            the sum of the interventions total budget.
          format: amount
        totalAnnualBudget:
          $ref: "#/components/schemas/AnnualBudgetDistributionSummary"
    AdditionalCostsTotalAmount:
      type: object
      properties:
        type:
          type: string
          description: >
            taxonomy code corresponding to the group additionalCost
          enum:
            - professionalServices
            - workExpenditures
            - contingency
            - others
        amount:
          type: number
          format: amount
          description: >
            calculated.
            the sum of that type of additional costs throughout the project

        note:
          type: string
          maxLength: 250
      discriminator:
        propertyName: type
    PlainProjectAnnualDistribution:
      type: object
      properties:
        annualProjectDistributionSummary:
          $ref: "#/components/schemas/PlainProjectAnnualDistributionSummary"
        annualPeriods:
          type: array
          items:
            $ref: "#/components/schemas/PlainProjectAnnualPeriod"
    PlainProjectAnnualDistributionSummary:
      type: object
      properties:
        additionalCostsNotes:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalCostsTotalAmount"
        totalAnnualBudgetNote:
          type: string
          maxLength: 250
    PlainProjectAnnualPeriod:
      type: object
      properties:
        additionalCosts:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalCost"
        annualPeriodInterventions:
          type: array
          items:
            $ref: "#/components/schemas/AnnualPeriodInterventions"
        annualAllowance:
          type: number
          description: >
            input for a non-geolocated project.
          format: amount
        accountId:
          type: number
          description: >
            the account external reference number (PTI program) for a non-geolocalized
            project
        year:
          type: number
          description: >
            calculated.
            the year of the annual period. allows searches and validations
          example: 2022
    AnnualPeriodInterventions:
      type: object
      properties:
        interventionId:
          type: string
        year:
          type: number
        annualAllowance:
          type: number
        accountId:
          type: number
    EnrichedProjectAnnualPeriod:
      type: object
      properties:
        rank:
          type: number
          description: >
            calulated.
            must range between [0, (project.endYear - project.startYear)] years
            starts at index 0
          example: 0
        year:
          type: number
          description: >
            calculated.
            the year of the annual period. allows searches and validations
          example: 2022
        programBookId:
          type: string
          description: > ## tbd
            the project must share the year with the programBook.
            example - a project planned between 2021 and 2023 have 3 annuals periods
            of three different years (2021, 2022, 2023) attached to their respective
            programBooks
        programBook:
          $ref: "#/components/schemas/EnrichedProgramBook"
        status:
          type: string
          description: >
            code of the taxonomy corresponding to the group annual period status
            (subset of project taxonomy statuses)
        categoryId:
          type: string
          description: >
            calculated.
            code of the taxonomy corresponding to the projectCategory for that year
        annualBudget:
          type: number
          format: amount
          description: >
            calculated.
            the sum of the annual project budget. write only for a non-geolocalized
            project
        additionalCosts:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalCost"
        additionalCostsTotalBudget:
          type: number
          description: >
            calculated.
            the sum of the additional costs for the year period.
          format: amount
        interventionIds:
          description: >
            the list of interventions integrated in the project and programmed in the
            annualPeriod
          type: array
          items:
            type: string
        interventionsTotalBudget:
          type: number
          description: >
            calculated.
            the sum of the interventions costs for the year period.
          format: amount
        annualAllowance:
          type: number
          description: >
            input for a non-geolocated project.
          format: amount
        accountId:
          type: number
          description: >
            the account external reference number (PTI program) for a non-geolocalized
            project
    AdditionalCost:
      type: object
      properties:
        type:
          type: string
          description: >
            taxonomy code corresponding to the group additionalCost
          enum:
            - professionalServices
            - workExpenditures
            - contingency
            - others
        amount:
          type: number
          format: amount
          default: 0
        accountId:
          type: number
          description: >
            the external account reference (PTI program) of the additionnal costs
          default: 0
          nullable: true ## tbd
      discriminator:
        propertyName: type
      required:
        - type
        - amount
    InterventionAnnualDistribution:
      type: object
      description: >
        the ventilation of the intervention within its related project
      properties:
        distributionSummary:
          $ref: "#/components/schemas/AnnualInterventionDistributionSummary"
        annualPeriods:
          type: array
          items:
            $ref: "#/components/schemas/InterventionAnnualPeriod"
    AnnualInterventionDistributionSummary:
      type: object
      properties:
        id:
          type: string
          description: >
            the interventionId
        totalAllowance:
          type: number
          description: >
            calculated.
          format: amount
        totalLength:
          type: number
          description: >
            calculated. in km
        note:
          type: string
          maxLength: 250
    AnnualBudgetDistributionSummary:
      type: object
      properties:
        totalAllowance:
          type: number
          description: >
            calculated.
          format: amount
        note:
          type: string
          maxLength: 250
    InterventionAnnualPeriod:
      type: object
      properties:
        rank:
          type: number
          description: >
            calulated.
            must range between [0, (project.endYear - project.startYear)] years
            starts at index 0
          example: 0
        year:
          type: number
          example: 2022
        annualAllowance:
          type: number
          format: amount
          default: 0
        annualLength:
          type: number
          default: 0
        accountId:
          type: number
          description: >
            the account external reference number (PTI program)
          default: 0
    CountBy:
      type: object
      description: The count of items based on a key.
      properties:
        id:
          allOf:
            - {}
            - description: The id of the count by
              example: MTL
        count:
          type: number
          description: The number of items
          example: 96
    Project:
      type: object
      description: the project integration
      properties:
        id:
          $ref: "#/components/schemas/ReferenceId"
        typeId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
    InterventionSearchRequest:
      type: object
      description: The intervention search request.
      properties:
        id:
          description: The intervention ID to filter on.
          example: I4234
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        q:
          type: string
          description: Search criteria used for the intervention ID and intervention's name. Checks if it contains the search criteria.
          maxLength: 100
        programBookId:
          description: The program book ID to filter on.
          example: 5e6086dfc9be6a133486df67
          oneOf:
            - $ref: "#/components/schemas/UuidOrUuidArray"
        programId:
          description: The program ID.
          example: prcpr
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        interventionTypeId:
          description: The intervention type ID.
          example: initialNeed
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        workTypeId:
          description: The work type ID.
          example: reconstruction
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        requestorId:
          description: The requestor ID.
          example: bell
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        boroughId:
          description: The borough ID.
          example: VRD
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        decisionTypeId:
          description: The decision typeId.
          example: revisionRequest
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        status:
          description: The intervention status.
          example: planned
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        interventionYear:
          type: integer
          description: The intervention year to search.
          minimum: 1900
          maximum: 3000
        fromInterventionYear:
          type: integer
          description: The intervention year to search from.
          minimum: 1900
          maximum: 3000
        toInterventionYear:
          type: integer
          description: The intervention year to search to.
          minimum: 1900
          maximum: 3000
        planificationYear:
          type: integer
          description: The planification year to search.
          minimum: 1900
          maximum: 3000
        fromPlanificationYear:
          type: integer
          description: The planification year to search from.
          minimum: 1900
          maximum: 3000
        toPlanificationYear:
          type: integer
          description: The planification year to search to.
          minimum: 1900
          maximum: 3000
        estimate:
          type: integer
          description: The estimate to search.
          minimum: 0
        fromEstimate:
          type: integer
          description: The estimate to search from.
          minimum: 0
        toEstimate:
          type: integer
          description: The estimate to search to.
          minimum: 0
        assetId:
          description: The asset ID.
          example: R134
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        assetTypeId:
          description: The asset type ID.
          example: fireHydrant
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        assetOwnerId:
          description: The asset owner ID.
          example: borough
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        interventionAreaBbox:
          description: The bbox for spatial search. A comma separated list of coordinates.
          example: -73.69024,45.494472,-73.531264,45.53972
          oneOf:
            - $ref: "#/components/schemas/SearchBbox"
        project:
          type: string
          description: The only possible value is 'null'. If null is specified, it will return interventions without projects.
          example: "null"
        executorId:
          description: The executor ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        medalId:
          description: The medal ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        decisionRequired:
          type: boolean
        intersectGeometry:
          $ref: "#/components/schemas/Geometry"
    OrderedProjectsPaginatedSearchRequest:
      allOf:
        - description: The ordered project search request object sent as a parameter.
          properties:
            projectLimit:
              type: integer
              description: The number of items to return
              minimum: 1
              maximum: 100000
              default: 20
            projectOffset:
              type: integer
              description: The result offset for pagination.
              minimum: 0
            projectOrderBy:
              type: string
              description: |
                Sort results, for example:
                -initialRank
              maxLength: 250
    InterventionPaginatedSearchRequest:
      allOf:
        - $ref: "#/components/schemas/InterventionSearchRequest"
        - description: The intervention search request object sent as a parameter.
          properties:
            limit:
              type: integer
              description: The number of items to return
              minimum: 1
              maximum: 100000
              default: 20
            offset:
              type: integer
              description: The result offset for pagination.
              minimum: 0
            orderBy:
              type: string
              description: |
                Sort results, for example:
                -estimate,priority
              maxLength: 250
            expand:
              description: The expand parameters for more information to be brought back.
              example: ["project"]
              oneOf:
                - $ref: "#/components/schemas/StringOrStringArray"
            fields:
              description: Comma separated list or array of strings of fields/attributes to return
              example: ["interventionTypeId", "boroughId"]
              oneOf:
                - $ref: "#/components/schemas/StringOrStringArray"
    InterventionCountBySearchRequest:
      allOf:
        - $ref: "#/components/schemas/InterventionSearchRequest"
        - description: The intervention count by request object.
          properties:
            countBy:
              type: string
              description: The object key to count the interventions by.
              maxLength: 50
          required:
            - countBy
    AssetsLastInterventionSearchRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
        assetExternalReferenceIds:
          type: array
          items:
            $ref: "#/components/schemas/ExternalReferenceId"
        planificationYear:
          type: integer
      required:
        - planificationYear
    AssetLastIntervention:
      type: object
      properties:
        assetId:
          type: string
        assetExternalReferenceId:
          $ref: "#/components/schemas/ExternalReferenceId"
        intervention:
          $ref: "#/components/schemas/LastIntervention"
      required:
        - intervention
    LastIntervention:
      type: object
      nullable: true
      properties:
        id:
          type: string
        planificationYear:
          type: integer
      required:
        - id
        - planificationYear
    ProjectSearchRequest:
      type: object
      description: The project search request object sent as a parameter.
      properties:
        excludeProgramBookIds:
            description: The program book ID excluded.
            example: 5e6086dfc9be6a133486df67
            oneOf:
              - $ref: "#/components/schemas/UuidOrUuidArray"
        q:
          type: string
          description: Search criteria used for the project ID, project's name, project's DRM number and project's submission number. Checks if it contains the search criteria.
          maxLength: 100
        interventionAssetTypeId:
          description: Code(s) of the taxonomy corresponding to the group assetType.
          type: array
          items:
            type: string
            maxLength: 50
        id:
          description: The project ID.
          example: P15234, ['P00001', 'P00002']
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        programBookId:
          description: The program book ID to filter on.
          example: 5e6086dfc9be6a133486df67
          oneOf:
            - $ref: "#/components/schemas/UuidOrUuidArray"
        projectTypeId:
          description: The project type ID.
          oneOf:
            - type: string
              maxLength: 50
            - type: array
              items:
                type: string
                maxLength: 50
        executorId:
          description: The executor ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        fromYear:
          type: integer
          pattern: '^\d{4}$'
        categoryId:
          description: The project category ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        subCategoryId:
          description: The project sub-category ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        boroughId:
          description: The borough ID.
          example: VRD
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        status:
          description: The status of the project.
          oneOf:
            - type: string
              maxLength: 50
            - type: array
              items:
                type: string
                maxLength: 50
        startYear:
          type: integer
          description: The start year to search from.
          minimum: 2000
          maximum: 3000
        fromStartYear:
          type: integer
          description: The year to search from.
          minimum: 2000
          maximum: 3000
        toStartYear:
          type: integer
          description: The year to search to.
          minimum: 2000
          maximum: 3000
        endYear:
          type: integer
          description: The end year to search from.
          minimum: 2000
          maximum: 3000
        fromEndYear:
          type: integer
          description: The year to search from.
          minimum: 2000
          maximum: 3000
        toEndYear:
          type: integer
          description: The year to search to.
          minimum: 2000
          maximum: 3000
        bbox:
          type: string
          description: The bbox for spatial search. A comma separated list of coordinates.
          maxLength: 250
        fromBudget:
          type: integer
          description: The budget to search from.
          minimum: 0
        budget:
          type: integer
          description: The budget to search.
          minimum: 0
        toBudget:
          type: integer
          description: The budget to search to.
          minimum: 0
        inChargeId:
          description: code of the taxonomy corresponding to the group requestor
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        workTypeId:
          description: The workType ID.
          example: rehabilitation
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        isGeolocated:
          description: Boolean whether the request should only return non-geolocated projects
          type: boolean
          default: true
        medalId:
          description: The medal ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        interventionProgramId:
          description: Code(s) of the taxonomy corresponding to the group programType
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        submissionNumber:
          description: The submission number.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        excludeIds:
          description: Unwanted ids
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        intersectGeometry:
          $ref: "#/components/schemas/Geometry"
    ProjectPaginatedSearchRequest:
      allOf:
        - $ref: "#/components/schemas/ProjectSearchRequest"
        - properties:
            limit:
              type: integer
              description: The number of items to return
              minimum: 1
              maximum: 100000
              default: 20
            offset:
              type: integer
              description: The result offset for pagination.
              minimum: 0
            expand:
              description: The expand parameters for more information to be brought back.
              oneOf:
                - type: string
                  maxLength: 250
                - type: array
                  items:
                    type: string
                    maxLength: 250
            fields:
              description: Comma separated list or array of strings of fields/attributes to return
              oneOf:
                - type: string
                  maxLength: 250
                - type: array
                  items:
                    type: string
                    maxLength: 250
            orderBy:
              type: string
              description: |
                Sort results, for example:
                -estimate,priority
              maxLength: 250
            isGeolocated:
              description: Boolean whether the request should only return non-geolocated projects
              type: boolean
              default: true
    ProjectCountBySearchRequest:
      allOf:
        - $ref: "#/components/schemas/ProjectSearchRequest"
        - description: The project count by request object.
          properties:
            countBy:
              type: string
              description: The object key to count the projects by.
              maxLength: 50
          required:
            - countBy
    RtuProjectSearchRequest:
      type: object
      description: The RTU project search request.
      properties:
        bbox:
          type: string
          description: The bbox for spatial search. A comma separated list of coordinates.
          maxLength: 250
        areaId:
          description: The area ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        partnerId:
          description: The partner ID.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        status:
          description: The status.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        phase:
          description: The phase.
          oneOf:
            - $ref: "#/components/schemas/StringOrStringArray"
        fromDateStart:
          description: Lower bound of the start date of the project.
          oneOf:
            - $ref: "#/components/schemas/Date"
        toDateStart:
          description: Upper bound of the start date of the project.
          oneOf:
            - $ref: "#/components/schemas/Date"
        fromDateEnd:
          description: Lower bound of the end date of the project.
          oneOf:
            - $ref: "#/components/schemas/Date"
        toDateEnd:
          description: Upper bound of the end date of the project.
          oneOf:
            - $ref: "#/components/schemas/Date"
        intersectGeometry:
          $ref: "#/components/schemas/Geometry"
        limit:
          type: integer
          description: The number of items to return.
          minimum: 1
          maximum: 100000
          default: 20
        offset:
          type: integer
          description: The result offset for pagination.
          minimum: 0
        orderBy:
          type: string
          description: Sort results.
          maxLength: 250
        fields:
          description: Comma separated list or array of strings of fields/attributes to return.
          oneOf:
            - type: string
              maxLength: 250
            - type: array
              items:
                type: string
                maxLength: 250
    PlainComment:
      type: object
      description: input for comment
      properties:
        categoryId:
          type: string
          description: code of the taxonomy corresponding to the group comment
        text:
          type: string
          description: the body content of the comment
          example: This is a comment
        isPublic:
          type: boolean
          default: true
        isProjectVisible:
          type: boolean
          description: >
            states if shareable and readable from the referenced project sheet
      required:
        - categoryId
        - text
    Comment:
      type: object
      description: the comments on the intervention
      allOf:
        - $ref: "#/components/schemas/PlainComment"
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            audit:
              $ref: "#/components/schemas/Audit"
      required:
        - id
        - categoryId
        - text
        - audit
    ExternalReferenceId:
      type: object
      description: an external intervention or project reference
      properties:
        type:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        value:
          type: string
          description: the external id value
      required:
        - type
        - value
    SubmissionDocumentRequest:
      type: object
      description:
        the attached document and metadata
      properties:
        file:
          type: string
          format: binary
          writeOnly: true
        documentName:
          type: string
          example: "carte intervention"
          maxLength: 250
      required:
        - documentName
        - file
    PlainDocument:
      type: object
      description: >
        the attached document and metadata
      properties:
        type:
          type: string
          description: >
            code of the taxonomy corresponding to the group document type (*'type de fichier'
            dans les maquettes)
        file:
          type: string
          format: binary
          writeOnly: true
        documentName:
          type: string
          example: "carte intervention"
          maxLength: 250
        isProjectVisible:
          type: boolean
          description: >
            states if shareable and readable from the referenced project sheet
          default: true
        notes:
          type: string
          example: "carte intervention v.3.4"
        validationStatus:
          type: string
          description: >
            1. a document attached by a requestor requires the validation of an AGIR planner
            2. a document attached by a planner is automatically validated
            3. the attachment of a document to a project is always performed by a planner,
               so the document is automatically validated on the POST /project/{id}/document
          enum:
            - pending
            - validated
            - refused
          default: pending
      required:
        - documentName
    EnrichedDocument:
      type: object
      description: >
        the persisted attached documents
      allOf:
        - $ref: "#/components/schemas/PlainDocument"
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            objectId:
              type: string
              description:
                the identifier of the resource in the storage system (storage API)
            audit:
              $ref: "#/components/schemas/Audit"
            fileName:
              type: string
              example: "carte intervention v.3.4.png"
      required:
        - documentName
        - fileName
        - id
        - audit
    InterventionDecision:
      type: object
      description: a decision attached to an intervention or project
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        previousPlanificationYear:
          type: integer
        typeId:
          type: string
          description: code of the taxonomy corresponding to the group intervention decision type
        targetYear:
          type: integer
          description: project year and/or intervention year change
          example: 2021
          minimum: 2000
          maximum: 3000
        text:
          type: string
          description: the body content of the rational
          example: Replanned in 2025 for a good reason
        refusalReasonId:
          type: string
          description: code of the taxonomy corresponding to the group refusalReason
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - typeId
        - text
    DecisionList:
      type: array
      description: the list of decision for an intervention
      items:
        $ref: "#/components/schemas/InterventionDecision"
    ProjectDecision:
      type: object
      description: a decision attached to an intervention or project
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        typeId:
          type: string
          description: code of the taxonomy corresponding to the group project decision type
        startYear:
          type: integer
          description: project year and/or intervention year change
          example: 2021
        endYear:
          type: integer
          description: project year and/or intervention year change
          example: 2022
        previousStartYear:
          type: integer
          example: 2020
        previousEndYear:
          type: integer
          example: 2021
        annualPeriodYear:
          type: integer
          example: 2021
        text:
          type: string
          description: the body content of the rational
          example: Replanned in 2025 for some good reason
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - typeId
        - text
    Priority:
      type: object
      properties:
        id:
          type: number
        weights:
          type: array
          items:
            $ref: "#/components/schemas/PriorityWeight"
        audit:
          $ref: "#/components/schemas/Audit"
    PriorityWeight:
      type: object
      properties:
        id:
          type: number
        code:
          type: number
          example: 100
        value:
          type: number
          example: 1
    Objective:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        organizationId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        length:
          type: number
        types:
          type: array
          items:
            type: string
            description: code de taxonomie appartenant au groupe GROUPE_TAXO
        budget:
          type: number
        year:
          type: number
        audit:
          $ref: "#/components/schemas/Audit"
    Rule:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        typeId:
          type: string
          description: code of the taxonomy corresponding to the group rule type
        startDate:
          $ref: "#/components/schemas/Date"
        endDate:
          $ref: "#/components/schemas/Date"
        geometry:
          $ref: "#/components/schemas/Geometry"
      required:
        - type
        - startDate
        - endDate
        - geometry
    Budget:
      type: object
      properties:
        allowance:
          type: number
        burnedDown:
          type: number
        balance:
          type: number
    Asset:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ReferenceId"
        typeId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        ownerId:
          type: string
          description: code de taxonomie appartenant au groupe GROUPE_TAXO
        length:
          $ref: "#/components/schemas/Length"
        geometry:
          $ref: "#/components/schemas/Geometry"
        diameter:
          type: string
          description: Asset Diameter
        material:
          type: string
          description: Asset material
        suggestedStreetName:
          type: string
          description: Suggested street name
        roadSections:
          description: external resources
          oneOf:
            - $ref: "#/components/schemas/FeatureCollection"
          x-do-not-validate: true
        workArea:
          description: external resouces
          oneOf:
            - $ref: "#/components/schemas/Feature"
          x-do-not-validate: true
        properties: {}
        externalReferenceIds:
          type: array
          items:
            $ref: "#/components/schemas/ExternalReferenceId"
        assetDesignData:
          $ref: "#/components/schemas/AssetDesignData"
      required:
        - typeId
        - ownerId
    AssetDesignData:
      type: object
      properties:
        upstreamAssetType:
          type: string
          description: Type of the upstream asset. Must be a taxonomy code that belongs to the group assetType.
        upstreamAssetId:
          type: string
          description: ID of the upstream asset.
        upstreamDepth:
          type: string
          description: Depth of the upstream asset.
        downstreamAssetType:
          type: string
          description: Type of the downstream asset. Must be a taxonomy code that belongs to the group assetType.
        downstreamAssetId:
          type: string
          description: ID of the downstream asset.
        downstreamDepth:
          type: string
          description: Depth of the downstream asset.
        numberOfConnections:
          type: integer
          description: Number of connections.
        deformation:
          type: integer
          description: Deformation of the asset.
        hasInfiltration:
          type: boolean
          description: Allows to identify the presence of infiltration.
        infiltrationChaining:
          type: string
          description: Description of the infiltration.
        infiltrationAssetId:
          type: string
          description: ID of the asset from which the infiltration starts.
        hasObstruction:
          type: boolean
          description: Allows to identify the presence of an obstruction.
        obstructionChaining:
          type: string
          description: Description of the obstruction.
        obstructionAssetId:
          type: string
          description: ID of the asset from which the obstruction starts.
        comment:
          type: string
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - audit
    AssetList:
      type: array
      items:
        $ref: "#/components/schemas/Asset"
    AssetsWorkAreaSearchRequest:
      type: object
      description: The assets search criterias.
      properties:
        assets:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: The asset ID.
              type:
                type: string
                description: The asset type. Must be a taxonomy code that belongs to group assetType.
            required:
              - id
              - type
        expand:
          type: array
          items:
            type: string
      required:
        - assets
    AssetsWorkArea:
      type: object
      description: The assets and the combined surface areas geometry.
      properties:
        assets:
          $ref: "#/components/schemas/AssetList"
        workArea:
          $ref: "#/components/schemas/Feature"
      required:
        - assets
        - workArea
    InterventionArea:
      type: object
      properties:
        isEdited:
          type: boolean
        geometry:
          $ref: "#/components/schemas/Geometry"
        geometryPin:
          $ref: "#/components/schemas/Point"
      required:
        - geometry
    Taxonomy:
      type: object
      description: the taxonomy object
      required:
        - group
        - code
        - label
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        group:
          type: string
        code:
          type: string
          pattern: '^\S+$'
        label:
          $ref: "#/components/schemas/LocalizedText"
        properties: {}
        description:
          $ref: "#/components/schemas/LocalizedText"
        isActive:
          type: boolean
        displayOrder:
          type: number
        valueString1:
          type: string
        valueString2:
          type: string
        valueBoolean1:
          type: boolean
    TaxonomyList:
      type: array
      items:
        $ref: "#/components/schemas/Taxonomy"
    Audit:
      type: object
      description: Audit fields following vdm standard
      properties:
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          $ref: "#/components/schemas/Author"
        lastModifiedAt:
          $ref: "#/components/schemas/Date"
        lastModifiedBy:
          $ref: "#/components/schemas/Author"
        expiredAt:
          $ref: "#/components/schemas/Date"
        expiredBy:
          $ref: "#/components/schemas/Author"
      readOnly: true
    Uuid:
      type: string
      description: The id of the object
      pattern: '^[\.@!0-9a-fA-Z]*$'
      example: 2819c223-7f76-453a-919d-413861904646
      readOnly: true
    UuidOrUuidArray:
      oneOf:
        - $ref: "#/components/schemas/Uuid"
        - type: array
          items:
            $ref: "#/components/schemas/Uuid"
    ProjectCategory:
      type: object
      properties:
        year:
          type: integer
          pattern: '^\d{4}$'
        categoryId:
          type: string
          description: code de taxonomie appartenant au groupe projectCategory
      required:
        - year
        - categoryId
    ProjectIdRequest:
      type: object
      properties:
        projectId:
          type: string
      required:
        - projectId
    ReferenceId:
      type: string
      description: The external reference id of the object
      pattern: '^[\.@!0-9a-fA-Z]*$'
      example: "28.12"
    Uri:
      type: string
      description: the uri of a document
      pattern: '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?'
      example: "https://storage.ville.montreal.qc.ca/store/doc/id"
    Author:
      type: object
      properties:
        userName:
          type: string
        displayName:
          type: string
      required:
        - userName
        - displayName
    Date:
      type: string
      description: "a date used a timestamp, start and end dates"
      format: date-time
      example: "2019-05-13T08:42:34Z"
    Interval:
      type: string
      format: day-time
      description: a number of day
      example: "365"
    FeatureCollection:
      type: object
      description: GeoJSon Feature collection
      required:
        - type
        - features
      externalDocs:
        url: "https://tools.ietf.org/html/rfc7946#section-3.3"
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
    Feature:
      type: object
      description: GeoJSon Feature
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          oneOf:
            - type: string
            - type: number
        geometry:
          $ref: "#/components/schemas/Geometry"
        properties: {}
    Geometry:
      type: object
      description: GeoJSon geometry object
      externalDocs:
        url: "http://geojson.org/geojson-spec.html"
      properties:
        type:
          $ref: "#/components/schemas/GeometryType"
        coordinates:
          oneOf:
            - $ref: "#/components/schemas/Point"
            - $ref: "#/components/schemas/MultiPoint"
            - $ref: "#/components/schemas/LineString"
            - $ref: "#/components/schemas/MultiLineString"
            - $ref: "#/components/schemas/Polygon"
            - $ref: "#/components/schemas/MultiPolygon"
      required:
        - type
        - coordinates
      discriminator:
        propertyName: type
    SearchAssetsRequest:
      type: object
      description: Describes asset search parameters
      properties:
        assetTypes:
          type: array
          items:
            type: string
        advancedIntersect:
          type: boolean
        geometry:
          $ref: "#/components/schemas/Geometry"
        id:
          type: string
          description: Search criteria used for the asset ID
    GeometryType:
      type: string
      description: The type of the feature's geometry
      enum:
        - Polygon
        - Point
        - MultiPoint
        - LineString
        - MultiLineString
        - MultiPolygon
    Point:
      $ref: "#/components/schemas/Point3D"
    MultiPoint:
      type: array
      items:
        $ref: "#/components/schemas/Point"
    LineString:
      type: array
      items:
        $ref: "#/components/schemas/Point3D"
      minItems: 2
    MultiLineString:
      type: array
      items:
        $ref: "#/components/schemas/LineString"
      minItems: 2
    Polygon:
      type: array
      items:
        type: array
        items:
          $ref: "#/components/schemas/Point3D"
      minItems: 4
    MultiPolygon:
      type: array
      items:
        $ref: "#/components/schemas/Polygon"
      minItems: 2
    Point3D:
      type: array
      description: Point in 3D space
      minItems: 2
      maxItems: 3
      items:
        type: number
    Paging:
      type: object
      properties:
        offset:
          type: integer
        limit:
          type: integer
        totalCount:
          type: integer
    ContinuationToken:
      type: string
      description: >-
        A base 64 server timestamp_id continuation token for syncing.
        {timestamp}-{id}
      example: "MjAyMC0wMy0wM1QxNjoyOTo0MS03YzQ3NjUxYy1jNDM3LTQ0MDAtOWQ0Yi0wNTU5YmFlNWY4ZDI="
    Created:
      required:
        - created
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
    ErrorResponse:
      required:
        - error
      properties:
        error:
          $ref: "#/components/schemas/ApiError"
    ApiError:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        target:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/ApiError"
        innererror:
          $ref: "#/components/schemas/ApiInnerError"
    ApiInnerError:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        innererror:
          $ref: "#/components/schemas/ApiInnerError"
    LocalizedText:
      type: object
      properties:
        fr:
          type: string
        en:
          type: string
    Length:
      type: object
      properties:
        value:
          type: number
        unit:
          type: string
          enum:
            - m
            - ft
    Borough:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    SearchBbox:
      type: string
      description: The bbox for spatial search. A comma separated list of coordinates.
      example: -73.69024,45.494472,-73.531264,45.53972
      maxLength: 250
    StringOrStringArray:
      oneOf:
        - type: string
          maxLength: 50
        - type: array
          items:
            type: string
            maxLength: 50
    ShpProperty:
      type: object
      description: a shape file for import of interventions and projects
      properties:
        ID:
          $ref: "#/components/schemas/Uuid"
        NUM_REF:
          type: string
          description: Reference number
        NOM:
          type: string
          description: Name of file
        DESCR:
          type: string
          description: Description of file
        PARTENAIRE:
          type: string
        STATUT:
          type: string
        TYPE:
          type: string
        PHASE:
          type: string
        PROB_REALI:
          type: string
          description: Realisation probability
        INTERVNT:
          type: string
          description: Intervention
        DT_SAISI:
          type: string
        DT_DEBUT:
          type: string
        DT_FIN:
          type: string
        LOCALIS:
          type: string
        projectId:
          type: string
          description: Project id
      required:
        - ID
        - NUM_REF
        - NOM
        - DESCR
        - PARTENAIRE
        - STATUT
        - TYPE
        - PHASE
        - PROB_REALI
        - INTERVNT
        - DT_SAISI
        - DT_DEBUT
        - DT_FIN
        - LOCALIS
    BicProject:
      type: object
      description: project imported by BIC
      properties:
        ANNEE_ACTUELLE:
          type: string
          example: "2020"
        ANNEE_DEBUT:
          type: string
          example: "2020"
        ANNEE_FIN:
          type: string
          example: "2020"
        ANNEE_PROGRAMATION:
          type: number
          example: 2020
        ANNEE_REVISEE:
          type: number
          example: 2019
        ARRONDISSEMENT_AGIR:
          type: string
          example: "VM"
        CATEGORIE_PROJET:
          type: string
          example: "PARACHEVEMENT"
        CLASSIFICATION:
          type: string
          example: "PI"
        COMMENTAIRES_DI_BIC:
          type: string
          example: "\n*2. Info Travaux *:\r\n- ARROND: Travaux de saillies allongées bordant le théâtre; intégrés au projet"
        COMMENTAIRE_INTERVENTION:
          type: string
          example: "Conduits (5 sem.)"
        COMMENTAIRE_PROJET:
          type: string
          example: "Requérant: bell - Intervention: reconstruction/accessWell - Coord: AV - Année:"
        COTE_GLOBALE:
          type: number
          example: 2
        COTE_PRIORITE_GLOBAL:
          type: number
          example: 2
        DESC_TYPE_TRAVAUX_TRC:
          type: string
          example: "Saillies "
        DIVISION_REQUERANT_INITIAL:
          type: string
          example: "GAV"
        ESTIMATION_REQUERANT:
          oneOf:
            - type: string
            - type: number
          example: "3,600,000"
        ESTIMATION_BUDG_GLOBAL:
          type: string
          example: "619491,5"
        ETAT_PROJET:
          type: string
          example: "Report"
        EXECUTANT_AGIR:
          type: string
          example: "di"
        ID_ARRONDISSEMENT:
          type: number
          example: 19
        ID_EXECUTANT:
          type: string
          example: "9"
        ID_PROJET:
          oneOf:
            - type: string
            - type: number
          example: "109139767550822007120143031960031106678"
        ID_TYPE_TRAVAUX_TRC:
          oneOf:
            - type: string
            - type: number
          example: "152693299256416066048342546752478294219"
        LONGUEUR_GLOBAL:
          type: number
          example: 0.123
        LONGUEUR_INTERV_REQUERANT:
          type: number
          example: 0
        MEDAILLE_AMENAGEMENT:
          type: string
          example: "Argent -Mineur"
        NO_PROJET:
          type: string
          example: "41511"
        NO_REFERENCE_REQ:
          type: string
          example: "100000"
        NOM_ARRONDISSEMENT:
          type: string
          example: "VILLE-MARIE"
        NOM_VOIE:
          type: string
          example: "Coupal (rue)"
        PROGRAMME:
          type: string
          example: "Programme ??"
        PROJET_REQUERANT:
          type: string
          example: "ARR"
        PROPRIETAIRE_ACTIF:
          type: string
          example: "bell"
        PRIORITE_REQ_AGIR:
          type: string
          example: "1"
        REQUERANT_AGIR:
          type: string
          example: "borough"
        REQUERANT_INITIAL:
          type: string
          example: "LY, KIM-HUOT"
        RISQUE_AUTRE_COMMENT:
          type: string
          example: "Risque - Autre: PE-911"
        RISQUE_ENFOUISS_COMMENT:
          type: string
          example: "Risque - Projet enfouissement: PE-911z"
        RISQUE_ACQUIS_TERRAIN:
          type: string
          example: "Risque - Acquisition de terrains / servitudes"
        RISQUE_ENTENTE:
          type: string
          example: ""
        COMMENTAIRE_ARRONDISSEMENT:
          type: string
          example: "Commentaire - Arrondissement: Pas de projet prévu"
        COMMENTAIRE_MTQ_INFO_RTU:
          type: string
          example: "MTQ - Info-RTU: 000000911"
        STATUT_INTERVENTION:
          type: string
          example: "integrated"
        STATUT_PROJET:
          type: string
          example: "Programmé"
        STATUT_SUIVI:
          type: string
          example: "pas_intervention"
        TITRE_PROJET:
          type: string
          example: "Station McGill"
        TYPE_ACTIF_AGIR:
          type: string
          example: "amenagement"
        TYPE_INTERVENTION:
          type: string
          example: "opportunity"
        TYPE_PROJET:
          type: string
          example: "Intégré"
        TYPE_RESEAU:
          type: string
          example: "Local"
        TYPE_TRAVAUX_AGIR:
          type: string
          example: "amenagement"
        VOIE_A:
          type: string
          example: "Dufresne (rue)"
        VOIE_DE:
          type: string
          example: "Fullum (rue)"
        PROJET_NOM_VOIE:
          type: string
          example: "Crestson (rue)"
        PROJET_VOIE_A:
          type: string
          example: "Dufresne (rue)"
        PROJET_VOIE_DE:
          type: string
          example: "Fullum (rue)"
        PROJET_COMMENTAIRE_INFO:
          type: string
          example: "Project information category comment"
        PROJET_COMMENTAIRE_REQ:
          type: string
          example: "Project requestor category comment"
        PROJET_COMMENTAIRE_HISTO:
          type: string
          example: "Project historic category comment"
        PROJET_EXIGENCE:
          type: string
          example: "Project requirements"
        PROJET_CONTRAINTE:
          type: string
          example: "Project temporal constraint comment"
        BUDGET_ANNEE_1:
          type: number
          example: 2553279.25
        BUDGET_ANNEE_2:
          type: number
          example: 11852753
        BUDGET_ANNEE_3:
          type: number
          example: 11852753
        NO_SOUMISSION:
          type: string
          example: 283301
      required:
        - ANNEE_DEBUT
        - ANNEE_FIN
        - ANNEE_PROGRAMATION
        - ARRONDISSEMENT_AGIR
        - EXECUTANT_AGIR
        - REQUERANT_AGIR
        - STATUT_PROJET
    GenerationReport:
      type: object
      description: The report returned from the generateReport function
      properties:
        totalProjects:
          type: number
          description: The total amount of projects
        totalGenerations:
          type: number
          description: The amount of successful generations
    HistorySummary:
      type: object
      description: An history for a modification on a intervention or a project
      properties:
        statusFrom:
          type: string
        statusTo:
          type: string
        comments:
          type: string
    User:
      type: object
      description: The user
      properties:
        accessToken:
          type: string
        iss:
          type: string
        exp:
          type: number
        iat:
          type: number
        keyId:
          type: number
        displayName:
          type: string
        aud:
          type: string
        name:
          type: string
        sub:
          type: string
        inum:
          type: string
        email:
          type: string
        userName:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        userType:
          type: string
        mtlIdentityId:
          type: string
        customData: {}
        privileges:
          type: array
          items:
            $ref: "#/components/schemas/GdaPrivileges"
      required:
        - accessToken
        - iss
        - exp
        - iat
        - keyId
        - displayName
        - aud
        - name
        - sub
        - inum
        - email
        - userName
        - givenName
        - familyName
        - userType
    GdaPrivileges:
      type: object
      properties:
        domain:
          type: string
        application:
          type: string
        role:
          type: string
        permissions:
          type: array
          items:
            type: string
        restrictions:
          description: A set of description
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
      required:
        - domain
        - application
        - role
        - permissions
        - restrictions
    BaseObjective:
      type: object
      properties:
        name:
          type: string
          description: The objective\'s name
          example: Budget de reconstruction des aqueducs
          maxLength: 100
        targetType:
          type: string
          description: The target type of objective
          example: bid
          enum:
            - bid
            - length
            - budget
        objectiveType:
          type: string
          description: The type of objective
          example: threshold
          enum:
            - threshold
            - performanceIndicator
        requestorId:
          type: string
          description: The requestor ID. Filters which projects will be part of the objective calculation.
          example: bell
        assetTypeIds:
          type: array
          items:
            type: string
          description: The asset type IDs. Filters which projects will be part of the objective calculation.
          example: ["fireHydrant", "streetTree"]
        workTypeIds:
          type: array
          items:
            type: string
          description: The work type IDs. Filters which projects will be part of the objective calculation.
          example: ["reconstruction", "construction"]
        pin:
          type: boolean
          description: The flag that indicate if the objective is a key objective for the program book.
          default: false
      required:
        - name
        - targetType
        - objectiveType
    PlainObjective:
      allOf:
        - $ref: "#/components/schemas/BaseObjective"
        - description: The plain objective. Used to create or update objectives.
        - properties:
            referenceValue:
              type: number
              description: The reference value. This is the target value of the objective.
              minimum: 1
              example: 29
      required:
        - referenceValue
    EnrichedObjective:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
        - $ref: "#/components/schemas/BaseObjective"
        - description: The enriched objective. Contains the complete objective information.
        - properties:
            values:
              $ref: "#/components/schemas/ObjectiveValues"
            audit:
              $ref: "#/components/schemas/Audit"
        - required:
            - id
            - values
            - audit
    ObjectiveValues:
      type: object
      description: The objective values. Contains the reference and the calclated values.
      properties:
        calculated:
          type: number
          description: The calculated value. This is the current actual value of the objective.
          example: 10
        reference:
          type: number
          description: The reference value. This is the target value of the objective.
          example: 29
      required:
        - calculated
        - reference
    ImportProjectRequest:
      type: object
      properties:
        bicProjects:
          type: array
          items:
            $ref: "#/components/schemas/BicProject"
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
    BicImportLog:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - id
        - audit
    PaginatedBicImportLogs:
      type: object
      description: a paginated collection of import logs
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/BicImportLog"
    PlainUserPreference:
      type: object
      properties:
        value:
          description: "Can be anything: string, number, array, object, etc."
      required:
        - value
    EnrichedUserPreference:
      type: object
      properties:
        key:
          type: string
          description: The unique key of the user's preference
        userId:
          type: string
          description: Username
        value:
          description: "Can be anything: string, number, array, object, etc."
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - key
        - userId
        - value
        - audit
    PriorityScenario:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        priorityLevels:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedPriorityLevel"
        orderedProjects:
          $ref: "#/components/schemas/PaginatedOrderedProjects"
        isOutdated:
          type: boolean
        status:
          type: string
        audit:
          $ref: "#/components/schemas/Audit"
    PlainPriorityLevel:
      type: object
      properties:
        rank:
          type: number
          example: 2
          description: >
            priority rank. 1 is defined by the system
        criteria:
          $ref: "#/components/schemas/PriorityLevelCriteria"
        sortCriterias:
          type: array
          description: The sort criterias to apply on the projects for this priority level.
          items:
            $ref: "#/components/schemas/PriorityLevelSortCriteria"
      required:
        - rank
        - criteria
        - sortCriterias
    EnrichedPriorityLevel:
      allOf:
        - $ref: "#/components/schemas/PlainPriorityLevel"
        - properties:
            isSystemDefined:
              type: boolean
            projectCount:
              type: number
              description: >
                Count of projects that match the criteria
    OrderedProject:
      type: object
      properties:
        projectId:
          type: string
          example: P00001
        levelRank:
          type: number
          example: 1
          description: >
            level rank, must be 1 or higher
        initialRank:
          type: number
          example: 1
          description: >
            initial rank, must be 1 or higher
        rank:
          type: number
          description: >
            project rank, start at 1
          example: 1
        isManuallyOrdered:
          type: boolean
          description: >
            Manually ordered rank indicator
          default: false
        note:
          type: string
          description: >
            note to justified the rank change
        audit:
          $ref: "#/components/schemas/Audit"
        objectivesCalculation:
          type: array
          items:
            $ref: "#/components/schemas/ObjectiveCalculation"
    PaginatedOrderedProjects:
      type: object
      description: a paginated collection of enriched projects
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderedProject"
    ProjectRank:
      type: object
      properties:
        newRank:
          type: number
          example: 1
          description: >
            new rank, must be 1 or higher
        isManuallyOrdered:
          type: boolean
          example: true
          description: >
            manually ordered rank indicator
        note:
          type: string
    PriorityLevelCriteria:
      type: object
      description: >
        priority level criteria
      properties:
        projectCategory:
          type: array
          items:
            $ref: "#/components/schemas/ProjectCategoryCriteria"
        workTypeId:
          description: >
            workTypeId must have taxonomy codes that belong to group workType
          type: array
          items:
            type: string
        requestorId:
          description: >
            requestorId must have taxonomy codes that belong to group requestor
          type: array
          items:
            type: string
        assetTypeId:
          description: >
            assetTypeId must have taxonomy codes that belong to group assetType
          type: array
          items:
            type: string
        interventionType:
          description: interventionType must have taxonomy codes that belong to the group interventionType
          type: array
          items:
            type: string
        servicePriorities:
          type: array
          items:
            $ref: "#/components/schemas/ServicePriority"
    BaseOpportunityNotice:
      type: object
      properties:
        projectId:
          type: string
          description: the reference to the project
        object:
          type: string
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Asset"
        requestorId:
          description: >
            requestorId must have taxonomy codes that belong to group requestor
          type: string
        contactInfo:
          type: string
        followUpMethod:
          type: string
        maxIterations:
          type: number
          minimum: 1
      required:
        - projectId
        - object
        - requestorId
        - followUpMethod
        - maxIterations
    PlainOpportunityNotice:
      allOf:
        - $ref: "#/components/schemas/BaseOpportunityNotice"
        - description: The opportunity notice. Used to create or update opportunity notice.
        - properties:
            notes:
              type: array
              items:
                $ref: "#/components/schemas/PlainNote"
            response:
              $ref: "#/components/schemas/PlainOpportunityNoticeResponse"
    EnrichedOpportunityNotice:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
        - $ref: "#/components/schemas/BaseOpportunityNotice"
        - properties:
            status:
              type: string
            audit:
              $ref: "#/components/schemas/Audit"
            notes:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedNote"
            response:
              $ref: "#/components/schemas/EnrichedOpportunityNoticeResponse"
        - required:
            - status
            - audit
    EnrichedOpportunityNoticePaginated:
      type: object
      description: a paginated collection of enriched opportunity notice
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/EnrichedOpportunityNotice"
    PlainNote:
      type: object
      properties:
        text:
          type: string
          maxLength: 250
      required:
        - text
    EnrichedNote:
      allOf:
        - $ref: "#/components/schemas/PlainNote"
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            audit:
              $ref: "#/components/schemas/Audit"
        - required:
            - id
            - audit
    PlainOpportunityNoticeResponse:
      type: object
      properties:
        requestorDecision:
          type: string
          enum:
            - yes
            - no
            - analyzing
        requestorDecisionNote:
          type: string
          maxLength: 250
        requestorDecisionDate:
          $ref: "#/components/schemas/Date"
        planningDecision:
          type: string
          enum:
            - accepted
            - rejected
        planningDecisionNote:
          type: string
          maxLength: 250
    EnrichedOpportunityNoticeResponse:
      allOf:
        - $ref: "#/components/schemas/PlainOpportunityNoticeResponse"
        - properties:
            audit:
              $ref: "#/components/schemas/Audit"
        - required:
            - audit
    ObjectiveCalculation:
      type: object
      properties:
        objectiveId:
          $ref: "#/components/schemas/Uuid"
        objectiveSum:
          type: number
        objectivePercent:
          type: number
      required:
        - objectiveId
        - objectiveSum
        - objectivePercent
    PlainNexoImportFile:
      type: object
      description: a NEXO import file
      properties:
        file:
          type: string
          format: binary
        fileType:
          type: string
          description: must be a taxonomy code that belongs to group nexoFileType
      required:
        - file
        - fileType
    NexoImportLog:
      type: object
      description: a NEXO import log
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        audit:
          $ref: "#/components/schemas/Audit"
        status:
          type: string
          description: must be a taxonomy code that belongs to group nexoImportStatus
        files:
          type: array
          items:
            $ref: "#/components/schemas/NexoImportFile"
      required:
        - id
        - audit
        - status
        - files
    NexoImportFile:
      type: object
      description: a NEXO import file
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          type: string
        type:
          type: string
          description: must be a taxonomy code that belongs to group nexoFileType
        status:
          type: string
          description: must be a taxonomy code that belongs to group nexoImportStatus
        numberOfItems:
          type: integer
        errorDescription:
          type: string
        projects:
          type: array
          items:
            $ref: "#/components/schemas/NexoLogProject"
        interventions:
          type: array
          items:
            $ref: "#/components/schemas/NexoLogIntervention"
      required:
        - id
        - name
        - contentType
        - type
        - status
    NexoLogIntervention:
      allOf:
        - properties:
            lineNumber:
              type: integer
        - $ref: "#/components/schemas/NexoLogProject"
      required:
        - lineNumber
    NexoLogProject:
      type: object
      properties:
        id:
          type: string
        importStatus:
          type: string
          description: must be a taxonomy code that belongs to group nexoImportStatus
        modificationType:
          type: string
          description: must be a taxonomy code that belongs to group modificationType
        description:
          type: string
      required:
        - id
        - importStatus
    ServicePriority:
      type: object
      properties:
        service:
          type: string
          description: must have taxonomy code that belongs to the group service
        priorityId:
          type: string
          description: must have taxonomy code that belongs to the group priorityType
      required:
        - service
        - priorityId
    AllowedMimeType:
      type: string
      enum:
        - application/pdf
        - application/msword
        - image/x-dwg
        - application/octet-stream
        - text/csv
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
        - application/vnd.openxmlformats-officedocument.wordprocessingml.document
        - application/vnd.ms-excel
        - application/vnd.ms-powerpoint
        - application/vnd
        - image/jpeg
        - image/jpg
        - image/png
        - image/gif
        - image/tiff
    ProjectCategoryCriteria:
      type: object
      properties:
        category:
          description: category must have taxonomy code that belongs to the group projectCategory
          type: string
        subCategory:
          description: subCategory must have taxonomy code that belongs to the groupe projectSubCategory
          type: string
      required:
        - category
    PriorityLevelSortCriteria:
      type: object
      description: a sort criteria of a priority level
      properties:
        name:
          type: string
          example: roadNetworkType
          description: The name of the sort criteria
        service:
          type: string
          example: se
          description: service must be a taxonomy code that belongs to group service
        rank:
          type: number
          example: 1
          description: The rank of the sort criteria
      required:
        - name
        - rank
    RtuProject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        areaId:
          type: string
        partnerId:
          type: string
        noReference:
          type: string
        geometryPin:
          $ref: "#/components/schemas/Point"
        geometry:
          $ref: "#/components/schemas/Geometry"
        status:
          type: string
        type:
          type: string
        phase:
          type: string
        dateStart:
          $ref: "#/components/schemas/Date"
        dateEnd:
          $ref: "#/components/schemas/Date"
        dateEntry:
          $ref: "#/components/schemas/Date"
        dateModification:
          $ref: "#/components/schemas/Date"
        cancellationReason:
          type: string
        productionPb:
          type: string
        conflict:
          type: string
        duration:
          type: string
        localization:
          type: string
        streetName:
          type: string
        streetFron:
          type: string
        streetTo:
          type: string
        contact:
          $ref: "#/components/schemas/RtuProjectContact"
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - id
        - name
        - areaId
        - partnerId
        - noReference
        - geometryPin
        - status
        - type
        - phase
        - dateStart
        - dateEnd
        - dateEntry
        - contact
        - audit
    RtuProjectContact:
      type: object
      properties:
        id:
          type: string
        officeId:
          type: string
        num:
          type: string
        prefix:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        title:
          type: string
        phoneExtensionNumber:
          type: string
        cell:
          type: string
        fax:
          type: string
        typeNotfc:
          type: string
        paget:
          type: string
        profile:
          type: string
        globalRole:
          type: string
        idInterim:
          type: string
        inAutoNotification:
          type: string
        inDiffusion:
          type: string
        areaName:
          type: string
        role:
          type: string
        partnerType:
          type: string
        partnerId:
          type: string
      required:
        - id
        - officeId
        - num
        - prefix
        - name
        - email
        - phone
    PaginatedRtuProjects:
      type: object
      description: a paginated collection of RTU projects
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        items:
          type: array
          items:
            $ref: "#/components/schemas/RtuProject"
    SubmissionCreateRequest:
      type: object
      properties:
        programBookId:
          type: string
          description: Identifier of the program book in which the submission is located.
        projectIds:
          type: array
          items:
            type: string
          description: Identifiers of projects belonging to the submission.
      required:
        - programBookId
        - projectIds
    SubmissionsSearchRequest:
      type: object
      description: The submissions search request.
      properties:
        submissionNumber:
          type: array
          items:
            type: string
        drmNumber:
          type: array
          items:
            type: string
        programBookId:
          type: array
          items:
            type: string
        projectIds:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            type: string
        progressStatus:
          type: array
          items:
            type: string
        limit:
          type: integer
          description: The number of items to return.
          minimum: 1
          maximum: 100000
          default: 20
        offset:
          type: integer
          description: The result offset for pagination.
          minimum: 0
        orderBy:
          type: string
          description: Sort results.
          maxLength: 250
        fields:
          description: Array of strings of fields/attributes to return.
          type: array
          items:
            type: string
            maxLength: 250
    SubmissionPatchRequest:
      type: object
      properties:
        status:
          type: string
          description: Submission status. Must be a taxonomy code that belongs to group submissionStatus.
        progressStatus:
          type: string
          description: Submission progress status. Must be a taxonomy code that belongs to group submissionProgressStatus.
        progressStatusChangeDate:
          allOf:
            - $ref: "#/components/schemas/Date"
            - description: Date on which the progress status change occurred
        comment:
          type: string
          description: Comment about the submission.
    Submission:
      type: object
      description: A submission.
      allOf:
        - properties:
            submissionNumber:
              type: string
              description: Unique identifier of the submission. Must have 6 numeric characters.
              example: "564201"
            drmNumber:
              type: string
              description: The DRM number associated with the submission. Must have 4 numeric characters.
              example: "5642"
            status:
              type: string
              description: Submission status. Must be a taxonomy code that belongs to group submissionStatus.
            progressStatus:
              type: string
              description: Submission progress status. Must be a taxonomy code that belongs to group submissionProgressStatus.
            progressHistory:
              type: array
              items:
                $ref: "#/components/schemas/ProgressHistoryItem"
              description: History of progress status changes.
            statusHistory:
              type: array
              items:
                $ref: "#/components/schemas/StatusHistoryItem"
            documents:
              type: array
              items:
                $ref: "#/components/schemas/EnrichedDocument"
              description: list of submission documents.
            requirements:
              type: array
              items:
                $ref: "#/components/schemas/SubmissionRequirement"
            audit:
              $ref: "#/components/schemas/Audit"
        - $ref: "#/components/schemas/SubmissionCreateRequest"
      required:
        - submissionNumber
        - drmNumber
        - programBookId
        - projectIds
        - status
        - progressStatus
        - audit
    StatusHistoryItem:
      type: object
      properties:
        status:
          type: string
          description: Must be a taxonomy code that belongs to group submissionStatus.
        comment:
          type: string
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          $ref: "#/components/schemas/Author"
      required:
        - status
        - comment
        - createdAt
        - createdBy
    ProgressHistoryItem:
      type: object
      properties:
        progressStatus:
          type: string
          description: Must be a taxonomy code that belongs to group submissionProgressStatus.
        createdAt:
          $ref: "#/components/schemas/Date"
        createdBy:
          $ref: "#/components/schemas/Author"
      required:
        - progressStatus
        - createdAt
        - createdBy
    SubmissionRequirementRequest:
      type: object
      description: A requirement.
      properties:
        subtypeId:
          type: string
          description: The requirement subtype. Must be a taxonomy code that belongs to the group submissionRequirementSubtype.
        text:
          type: string
          description: The requirement description.
        projectIds:
          type: array
          items:
            type: string
          description: The projects IDs to which the requirement relates.
      required:
        - subtypeId
        - text
    SubmissionRequirement:
      type: object
      description: A requirement.
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            mentionId:
              type: string
              description: The requirement mention. Must be a taxonomy code that belongs to the group submissionRequirementMention.
            typeId:
              type: string
              description: The requirement type. Must be a taxonomy code that belongs to the group submissionRequirementType.
            isDeprecated:
              type: boolean
              description: Indicates whether the requirement is obsolete or not.
            planningRequirementId:
              allOf:
                - $ref: "#/components/schemas/Uuid"
                - description: ID of the planning requirement from which this design requirement originates.
            audit:
              $ref: "#/components/schemas/Audit"
          required:
            - id
            - mentionId
            - typeId
            - isDeprecated
            - audit
        - $ref: "#/components/schemas/SubmissionRequirementRequest"
    RtuExportLog:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        status:
          type: string
        startDateTime:
          $ref: "#/components/schemas/Date"
        endDateTime:
          $ref: "#/components/schemas/Date"
        errorDescription:
          type: string
        projects:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              status:
                type: string
              projectName:
                type: string
              streetName:
                type: string
              streetFrom:
                type: string
              streetTo:
                type: string
              errorDescriptions:
                type: array
                items:
                  type: string
            required:
              - id
              - status
              - projectName
              - streetName
              - streetFrom
              - streetTo
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - id
        - status
        - startDateTime
        - audit
    RtuImportLog:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        startDateTime:
          $ref: "#/components/schemas/Date"
        endDateTime:
          $ref: "#/components/schemas/Date"
        status:
          type: string
        errorDescription:
          type: string
        failedProjects:
          type: array
          items:
            type: object
            properties:
              projectId:
                type: string
              projectNoReference:
                type: string
              projectName:
                type: string
              streetName:
                type: string
              streetFrom:
                type: string
              streetTo:
                type: string
              errorDescriptions:
                type: array
                items:
                  type: string
            required:
              - projectId
              - projectNoReference
              - projectName
              - streetName
              - streetFrom
              - streetTo
              - errorDescriptions
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - id
        - startDateTime
        - endDateTime
        - status
        - audit
    PlainRequirement:
      type: object
      description: A constraint or technical requirement.
      properties:
        typeId:
          type: string
          description: The requirement type. Must be a taxonomy code that belongs to the group requirementType.
        subtypeId:
          type: string
          description: The requirement subtype. Must be a taxonomy code that belongs to the group requirementSubtype.
        text:
          type: string
          description: The requirement description.
        items:
          type: array
          description: Items of the requirement. Must contain at least one item and at most two items.
          items:
            $ref: "#/components/schemas/RequirementItem"
      required:
        - typeId
        - subtypeId
        - text
        - items
    Requirement:
      allOf:
        - properties:
            id:
              $ref: "#/components/schemas/Uuid"
            audit:
              $ref: "#/components/schemas/Audit"
        - $ref: "#/components/schemas/PlainRequirement"
        - description: The enriched requirement
      required:
        - id
        - audit
    RequirementItem:
      type: object
      description: A requirement item.
      properties:
        id:
          type: string
          description: The identifier of the requirement item.
        type:
          type: string
          description: The requirement item type. Must be a taxonomy code that belongs to the group requirementTargetType.
      required:
        - id
        - type
    DesignData:
      type: object
      properties:
        upstreamAssetType:
          type: string
          description: Type of the upstream asset. Must be a taxonomy code that belongs to the group assetType.
        upstreamAssetId:
          type: string
          description: ID of the upstream asset.
        downstreamAssetType:
          type: string
          description: Type of the downstream asset. Must be a taxonomy code that belongs to the group assetType.
        downstreamAssetId:
          type: string
          description: ID of the downstream asset.
        comment:
          type: string
        contractRange:
          type: string
        audit:
          $ref: "#/components/schemas/Audit"
      required:
        - audit
    InterventionExtractSearchRequest:
      type: object
      description: The intervention search request.
      properties:
        planificationYear:
          type: integer
          description: The planification year to search.
        q:
          type: string
          description: Search criteria used for the intervention ID and intervention's name. Checks if it contains the search criteria.
          maxLength: 100
        programId:
          description: The program ID.
          type: array
          items:
            type: string
            maxLength: 50
        interventionTypeId:
          description: The intervention type ID.
          type: array
          items:
            type: string
            maxLength: 50
        workTypeId:
          description: The work type ID.
          type: array
          items:
            type: string
            maxLength: 50
        requestorId:
          description: The requestor ID.
          type: array
          items:
            type: string
            maxLength: 50
        boroughId:
          description: The borough ID.
          type: array
          items:
            type: string
            maxLength: 50
        decisionTypeId:
          description: The decision typeId.
          type: array
          items:
            type: string
            maxLength: 50
        status:
          description: The intervention status.
          type: array
          items:
            type: string
            maxLength: 50
        fromEstimate:
          type: integer
          description: The estimate to search from.
          minimum: 0
        toEstimate:
          type: integer
          description: The estimate to search to.
          minimum: 0
        executorId:
          description: The executor ID.
          type: array
          items:
            type: string
            maxLength: 50
        medalId:
          description: The medal ID.
          type: array
          items:
            type: string
            maxLength: 50
        decisionRequired:
          type: boolean
        assetTypeId:
          description: The asset type ID.
          type: array
          items:
            type: string
            maxLength: 50
        fields:
          description: Comma separated list or array of strings of fields/attributes to return.
          type: array
          items:
            type: string
            maxLength: 50
      required:
        - planificationYear
        - fields
    ProjectExtractSearchRequest:
      type: object
      description: The project search request object sent as a parameter.
      properties:
        q:
          type: string
          description: Search criteria used for the project ID, project's name, project's DRM number and project's submission number. Checks if it contains the search criteria.
          maxLength: 100
        interventionAssetTypeId:
          description: Code(s) of the taxonomy corresponding to the group assetType.
          type: array
          items:
            type: string
            maxLength: 50
        programBookId:
          description: The program book ID to filter on.
          type: array
          items:
            $ref: "#/components/schemas/Uuid"
        projectTypeId:
          description: The project type ID.
          type: array
          items:
            type: string
            maxLength: 50
        executorId:
          description: The executor ID.
          type: array
          items:
            type: string
            maxLength: 50
        categoryId:
          description: The project category ID.
          type: array
          items:
            type: string
            maxLength: 50
        subCategoryId:
          description: The project sub-category ID.
          type: array
          items:
            type: string
            maxLength: 50
        boroughId:
          description: The borough ID.
          type: array
          items:
            type: string
            maxLength: 50
        status:
          description: The status of the project.
          type: array
          items:
            type: string
            maxLength: 50
        year:
          type: integer
          description: The year to search.
          minimum: 2000
          maximum: 3000
        fromBudget:
          type: integer
          description: The budget to search from.
          minimum: 0
        toBudget:
          type: integer
          description: The budget to search to.
          minimum: 0
        workTypeId:
          description: The workType ID.
          type: array
          items:
            type: string
            maxLength: 50
        medalId:
          description: The medal ID.
          type: array
          items:
            type: string
            maxLength: 50
        interventionProgramId:
          description: Code(s) of the taxonomy corresponding to the group programType
          type: array
          items:
            type: string
            maxLength: 50
        submissionNumber:
          description: The submission number.
          type: array
          items:
            type: string
            maxLength: 50
        isGeolocated:
          description: Boolean whether the request should only return geolocated or non-geolocated projects.
          type: boolean
        fields:
          description: Comma separated list or array of strings of fields/attributes to return.
          type: array
          items:
            type: string
            maxLength: 50
      required:
        - year
        - fields