{
	"info": {
		"_postman_id": "b4c2adb7-86f4-4056-90b7-89396c029465",
		"name": "Auth v3.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Access Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "706a6af8-b219-4f36-8984-7d90fe9a7476",
						"exec": [
							"",
							"// ==========================================",
							"// Configuration",
							"//",
							"// Veuillez lire la section \"Tests nécessitant de l'authentification, avec Postman\"",
							"// https://bitbucket.org/villemontreal/generator-mtl-node-api/src/develop/generators/app/templates/README.md#markdown-header-tests-necessitant-de-lauthentification-avec-postman",
							"// ==========================================",
							"",
							"",
							"//------------------------------------------",
							"// Example pour un citoyen en DEV ou ACC.",
							"//------------------------------------------",
							"const env = 'dev'; // 'dev' or 'acc'",
							"const authMethod = 'api';",
							"const clientId = '@!4025.CA62.9BB6.16C5!0001!2212.0010!0008!2212.0010';",
							"const clientSecret = 'clt5kwy87T';",
							"const user = 'hebertdanny@gmail.com';",
							"const password = 'qwerty10';",
							"const scope = 'openid profile user_name';",
							"",
							"//------------------------------------------",
							"// Example pour un employé en DEV ou ACC.",
							"//------------------------------------------",
							"/*",
							"const env = 'dev'; // 'dev' or 'acc'",
							"const authMethod = 'api';",
							"const clientId = '@!4025.CA62.9BB6.16C5!0001!2212.0010!0008!2212.0010';",
							"const clientSecret = 'clt5kwy87T';",
							"const user = 'xgmdw10';",
							"const password = 'asdf12345';",
							"const scope = 'openid profile user_name';",
							"*/",
							"",
							"//------------------------------------------",
							"// Example pour un compte de service en DEV ou ACC.",
							"//------------------------------------------",
							"/*",
							"const env = 'dev'; // 'dev' or 'acc'",
							"const authMethod = 'api';",
							"const clientId = '@!4025.CA62.9BB6.16C5!0001!2212.0010!0008!2212.0010';",
							"const clientSecret = 'clt5kwy87T';",
							"const user = 'srvAccBPM';",
							"const password = 'srvhYC8f2Pv';",
							"const scope = 'openid profile user_name';",
							"*/",
							"",
							"//------------------------------------------",
							"// Example pour un citoyen en PROD,",
							"// en utilisant la méthode \"web\"!",
							"//",
							"// Cette technique permet d'obtenir un access token",
							"// citoyen sans connaitre le secret du client!",
							"//------------------------------------------",
							"/*",
							"const env = 'prod';",
							"const authMethod = 'web';",
							"const clientId = '@!4025.CA62.9BB6.16C5!0001!2212.0010!0008!2212.0030';",
							"const redirect_uri = 'https://beta.montreal.ca/mon-compte/en/autorisation';",
							"const user = 'gertrudetremblay@mailinator.com';",
							"const password = 'jeSuisUnChevreui42';",
							"const scope = 'openid profile user_name';",
							"*/",
							"",
							"// ==========================================",
							"// Do not edit",
							"// ==========================================",
							"postman.clearEnvironmentVariable('authHeader');",
							"postman.clearGlobalVariable('authHeader');",
							"errorMessage();",
							"",
							"let envClean = env? env.toLowerCase() : 'dev';",
							"if (envClean === 'dev' || envClean === 'develop' || envClean === 'development') {",
							"    envClean = 'dev';",
							"} else if (envClean === 'acc' || envClean === 'accept' || envClean === 'acceptation') {",
							"    envClean = 'acc';",
							"} else if (envClean === 'prod' || envClean === 'production') {",
							"    envClean = 'prod';",
							"} else {",
							"    errorMessage('la variable \"env\" doit être \"dev\", \"acc\" ou \"prod\".');",
							"    return;",
							"}",
							"postman.setGlobalVariable('authSpaFlowEnv', envClean);",
							"",
							"let authMethodClean = authMethod? authMethod.toLowerCase() : '';",
							"if (authMethodClean === 'api') {",
							"    authApi();",
							"} else if (authMethodClean === 'web') {",
							"    authWeb();",
							"} else {",
							"    errorMessage('la variable \"authMethod\" doit être \"api\" ou \"web\".');",
							"}",
							"",
							"function authApi() {",
							"    let accessTokenProviderUrl = '';",
							"    ",
							"    if (envClean === 'dev') {",
							"        accessTokenProviderUrl += 'https://auth.dev.interne.montreal.ca/oxauth/seam/resource/restv1/oxauth/token';",
							"    } else if (envClean === 'acc') {",
							"        accessTokenProviderUrl += 'https://auth.accept.interne.montreal.ca/oxauth/seam/resource/restv1/oxauth/token';",
							"    } else {",
							"        accessTokenProviderUrl += 'https://auth.montreal.ca/oxauth/seam/resource/restv1/oxauth/token';",
							"    }",
							"    ",
							"    request(accessTokenProviderUrl,",
							"            'POST', ",
							"            (res) => {",
							"                authApiResult(accessTokenProviderUrl, res);",
							"            }, ",
							"            {",
							"                'content-type': 'application/x-www-form-urlencoded',",
							"                'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)",
							"            }, ",
							"            {",
							"                mode: 'urlencoded',",
							"                urlencoded: [",
							"                    { key: \"grant_type\", value: \"password\" },",
							"                    { key: \"username\", value: user },",
							"                    { key: \"password\", value: password },",
							"                    { key: \"scope\", value: scope },",
							"                ]",
							"            });",
							"}",
							"",
							"function authApiResult(accessTokenProviderUrl, res) {",
							"    const jsonData = JSON.parse(res.stream.toString('utf8'));",
							"    const accessToken = jsonData.access_token;",
							"    if(accessToken) {",
							"        saveAccessToken(accessToken);",
							"    } else {",
							"        errorMessage(JSON.stringify(jsonData));",
							"    }",
							"}",
							"",
							"function authWeb() {",
							"    let internePart = '';",
							"    if (envClean === 'dev') {",
							"        internePart += 'dev.interne.';",
							"    } else if (envClean === 'acc') {",
							"        internePart += 'accept.interne.';",
							"    }",
							"",
							"    const authorizeUrl = 'https://auth.' + internePart + 'montreal.ca/oxauth/seam/resource/restv1/oxauth/authorize?response_type=token&client_id=' + ",
							"        clientId + '&redirect_uri=' + redirect_uri + '&scope=' + scope + '&state=dummy-state&nonce=dummy-nonce&acr_values=';",
							"        ",
							"    request(authorizeUrl, 'GET', authorizePage);",
							"}",
							"",
							"function authorizePage(res) {",
							"    const redirectUrl = getLocationHeaderForceHttps(res);",
							"    if(!redirectUrl) {",
							"        ",
							"        // If \"Automatically follow redirects\" option is enabled in Postman,",
							"        // we're now on the login page...",
							"        const contentType = getHeaderFromPostmanResponseObject(res, 'Content-Type');",
							"        if(contentType.indexOf('text/html') > -1) {",
							"            let msg = 'L\\'option \"Automatically follow redirects\" ne pas semble pas désactivée!';",
							"            errorMessage(msg);",
							"            return;",
							"        }",
							"",
							"        // Otherwise, it is another error...",
							"        const responseBody = res.stream.toString('utf8');",
							"        errorMessage(responseBody);",
							"        return;",
							"    }",
							"    ",
							"    request(redirectUrl, 'GET', goToLoginPage);",
							"}",
							"    ",
							"function goToLoginPage(res) {",
							"    const loginPageUrl = getLocationHeaderForceHttps(res);",
							"    if(!loginPageUrl) {",
							"        const responseBody = res.stream.toString('utf8');",
							"        errorMessage(responseBody);",
							"        return;",
							"    }",
							"    ",
							"    request(loginPageUrl, 'GET', (res) => {",
							"        const loginPageHtml = res.stream.toString('utf8');",
							"        sendLogin(loginPageUrl, loginPageHtml);",
							"    });",
							"}",
							"",
							"function sendLogin(loginPageUrl, loginPageHtml) {",
							"    ",
							"    const $loginPage = cheerio(loginPageHtml);",
							"    const formSignature = $loginPage.find('input[name=\"javax.faces.FormSignature\"]').val();",
							"    ",
							"    request(loginPageUrl,",
							"            'POST', ",
							"            (res) => {",
							"                firstRedirectAfterLogin(loginPageUrl, res);",
							"            }, ",
							"            {",
							"                \"content-type\": \"application/x-www-form-urlencoded\"",
							"            }, ",
							"            {",
							"                mode: \"urlencoded\",",
							"                urlencoded: [",
							"                    { key: \"loginForm\", value: \"loginForm\" },",
							"                    { key: \"javax.faces.ViewState\", value: \"stateless\" },",
							"                    { key: \"loginForm:loginButton\", value: \"Me+connecter\" },",
							"                    { key: \"loginForm:username\", value: user },",
							"                    { key: \"loginForm:password\", value: password },",
							"                    { key: \"javax.faces.FormSignature\", value: formSignature }",
							"                ]",
							"            });",
							"}",
							"",
							"function firstRedirectAfterLogin(loginPageUrl, previousRes) {",
							"    const redirectUrl = getLocationHeaderForceHttps(previousRes);",
							"    ",
							"    // Invalid credentials",
							"    if(!redirectUrl) {",
							"        let msg = 'ERREUR\\n\\n';",
							"        msg += 'Une erreur est survenue lors du POST du user/password.\\nEst-ce que ces informations sont valides?\\n\\n';",
							"        msg += 'Ouvrez la console de Postman, relancez la requête et ouvrez la section \"Response Body\"\\n';",
							"        msg += 'de la requête POST vers \"' + loginPageUrl + '\"\\n';",
							"        msg += 'pour visualiser le HTML retourné.';",
							"        showMessage(msg);",
							"        return;",
							"    }",
							"    ",
							"    request(redirectUrl, 'GET', secondRedirectAfterLogin);",
							"}",
							"",
							"function secondRedirectAfterLogin(previousRes) {",
							"    const redirectUrl = getLocationHeaderForceHttps(previousRes);",
							"    request(redirectUrl, 'GET', extractAndSaveAccessToken);",
							"}",
							"",
							"",
							"// ==========================================",
							"// Utility functions",
							"// ==========================================",
							"",
							"function extractAndSaveAccessToken(previousRes) {",
							"    const accessToken = extractAccessToken(getLocationHeaderForceHttps(previousRes));",
							"    saveAccessToken(accessToken);",
							"}",
							"",
							"function extractAccessToken(url) {",
							"    const match = /access_token=([^&]+)/.exec(url);",
							"    const accessToken = (match && match[1]) ? match[1] : undefined;",
							"    return accessToken;",
							"}",
							"",
							"function saveAccessToken(accessToken) {",
							"    postman.setGlobalVariable('authHeader', 'Bearer ' + accessToken);",
							"    ",
							"    let msg = 'Access Token généré:\\n' + accessToken + '\\n\\n';",
							"    msg += 'La variable \"{{authHeader}}\" de Postman contient maintenant \"Bearer \" + cet access token.\\n\\n';",
							"    msg += 'Pour accéder à un endpoint protégé par authentification, ajoutez\\n';",
							"    msg += 'à votre requête un header \"Authorization\" ayant \"{{authHeader}}\" comme valeur.\\n\\n';",
							"    msg += 'Notez que pour lancer une requête *locale*, vous devez premièrement\\n';",
							"    msg += 'transformer cet access token en JWT, en lançant la requête \"JWT\" également fournie.';",
							"    ",
							"    showMessage(msg);",
							"}",
							"",
							"function getLocationHeaderForceHttps(gluuResObj) {",
							"    let redirectUrl = getHeaderFromPostmanResponseObject(gluuResObj, 'Location');",
							"    if(redirectUrl && redirectUrl.startsWith(\"http://\")) {",
							"        redirectUrl = \"https://\" + redirectUrl.substring(\"http://\".length);",
							"    }",
							"    return redirectUrl;",
							"}",
							"",
							"function getHeaderFromPostmanResponseObject(gluuResObj, headerName) {",
							"    if(!gluuResObj) {",
							"        return undefined;",
							"    }",
							"    ",
							"    // For some reasons, Postman wraps some",
							"    // properties. It's easier to deal with those",
							"    // properties on a plain object,",
							"    gluuResObj = JSON.parse(JSON.stringify(gluuResObj));",
							"    ",
							"    if(!gluuResObj.header) {",
							"        return undefined;",
							"    }",
							"    ",
							"    headerName = headerName.toLowerCase();",
							"    ",
							"    const headers = gluuResObj.header;",
							"    for(const headerObj of headers) {",
							"        if (headerObj.key.toLowerCase() === headerName) {",
							"           return headerObj.value;",
							"        }",
							"    }",
							"    ",
							"    return undefined;",
							"}",
							"",
							"function request(url, method, callback, headers, body) {",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: method,",
							"        header: headers,",
							"        body: body",
							"    }, function (err, res) {",
							"        if (err) {",
							"            err = JSON.stringify(err);",
							"            console.log('Error : ' + err);",
							"            errorMessage(err);",
							"        } else {",
							"            callback(res);",
							"        }",
							"    }); ",
							"}",
							"",
							"function errorMessage(err) {",
							"    ",
							"    if (err && (typeof err === 'object') && Object.keys(err).length === 0) {",
							"        err = null;",
							"    }",
							"    ",
							"    let errorMsg = 'ERREUR\\n\\n';",
							"    if (err) {",
							"        errorMsg += err + '\\n\\n';",
							"    }",
							"",
							"    errorMsg += 'Ouvrez la console de Postman et relancez la requête pour plus de détails.\\n\\n';",
							"    errorMsg += 'Vérifiez vos informations de connection.\\n\\n';",
							"    errorMsg += 'Vérifiez aussi que l\\'option \"Automatically follow redirects\" est *désactivée*\\n'",
							"    errorMsg += 'dans les configurations de Postman!';",
							"    showMessage(errorMsg);",
							"}",
							"",
							"function showMessage(msg) {",
							"    msg =  msg + '\\n';",
							"    const url = 'https://api.interne.montreal.ca/api/it-platforms/utils/http/v1/echo?msg=' + encodeURIComponent(msg);",
							"",
							"    postman.setGlobalVariable('authSpaFlowUrl', url);",
							"}",
							"",
							"// Export utility functions",
							"postman.setGlobalVariable('authSpaFlowUtils', request.toString() + errorMessage.toString() + showMessage.toString());",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58f79379-7918-4f52-960c-006b76aff920",
						"exec": [
							"// Cleanup",
							"postman.clearGlobalVariable('authSpaFlowUrl');"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{authSpaFlowUrl}}",
					"host": [
						"{{authSpaFlowUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "384e73ee-d8a7-4a17-859e-40e3ef62dc4a",
						"exec": [
							"// Cleanup",
							"postman.clearGlobalVariable('authSpaFlowUrl');",
							"",
							"const success = postman.getGlobalVariable('authSpaFlowJwtSuccess');",
							"if(success) {",
							"    postman.clearGlobalVariable('authEnv');",
							"    postman.clearGlobalVariable('authSpaFlowUtils');",
							"}",
							"postman.clearGlobalVariable('authSpaFlowJwtSuccess');",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f289e25d-4371-4bfa-af78-29e4d31f59f5",
						"exec": [
							"",
							"// ==========================================",
							"// Do not edit",
							"// ==========================================",
							"",
							"const authSpaFlowUtils = postman.getGlobalVariable('authSpaFlowUtils');",
							"const env = postman.getGlobalVariable('authSpaFlowEnv');",
							"const authHeader = postman.getGlobalVariable('authHeader');",
							"",
							"if(!authSpaFlowUtils || !env || !authHeader) {",
							"    postman.setGlobalVariable('authSpaFlowUrl', 'https://api.interne.montreal.ca/api/it-platforms/utils/http/v1/echo?msg=' +",
							"        encodeURIComponent('Veuillez lancer la requête \"Access Token\" avant de lancer celle-çi!'));",
							"    return;",
							"}",
							"",
							"// Import utility functions",
							"eval(authSpaFlowUtils);",
							"",
							"errorMessage();",
							"",
							"let internePart = '';",
							"if (env === 'dev') {",
							"    internePart += 'dev.interne.';",
							"} else if (env === 'acc') {",
							"    internePart += 'accept.interne.';",
							"} else if (env === 'prod') {",
							"    internePart += 'interne.';",
							"}",
							"const url = 'https://api.' + internePart + 'montreal.ca/api/it-platforms/utils/http/v1/request';",
							"",
							"request(url, 'GET', (res) => {",
							"    ",
							"    const jsonData = JSON.parse(res.stream.toString('utf8'));",
							"    postman.setGlobalVariable('authHeader', jsonData.headers.authorization);",
							"    ",
							"    let jwt = jsonData.headers.authorization;",
							"    jwt = jwt.substring(jwt.indexOf(\" \") + 1);",
							"    ",
							"    postman.setGlobalVariable('authSpaFlowJwtSuccess', true);",
							"    ",
							"    let msg = 'JWT généré:\\n' + jwt + '\\n\\n';",
							"    msg += 'La variable \"{{authHeader}}\" de Postman contient maintenant \"Bearer \" + ce JWT.\\n\\n';",
							"    msg += 'Vous pouvez copier ce JWT à https://jwt.io pour en inspecter les informations.\\n\\n';",
							"    msg += 'Pour accéder à un endpoint local protégé par authentification, ajoutez\\n';",
							"    msg += 'à la requête un header \"Authorization\" ayant \"{{authHeader}}\" comme valeur.';",
							"    ",
							"    showMessage(msg);",
							"    ",
							"}, {",
							"    \"Authorization\": authHeader",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{authSpaFlowUrl}}",
					"host": [
						"{{authSpaFlowUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Protected endpoint example (dev)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{authHeader}}",
						"description": "Le header requis pour l'authentification"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-Correlation-Id",
						"value": "CID-Test-{{$guid}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.dev.interne.montreal.ca/api/it-platforms/utils/http/v1/protected/example",
					"protocol": "https",
					"host": [
						"api",
						"dev",
						"interne",
						"montreal",
						"ca"
					],
					"path": [
						"api",
						"it-platforms",
						"utils",
						"http",
						"v1",
						"protected",
						"example"
					]
				}
			},
			"response": []
		}
	]
}