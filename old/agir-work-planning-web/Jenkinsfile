#!groovy
// Documentation disponible ici :
// https://sticonfluence.interne.montreal.ca/display/IEP/2+-+Configuration

@Library('cicd-lib')
import vdmtl.cicd.*
import jenkins.model.*


pipeline = new Pipeline()

// For more information on the configuration options,
// see https://bitbucket.org/villemontreal/cicd-lib/src/master/docs/Config.md
ctx = pipeline.createContext([
    // Namespaces are used in K8s to group similar microservices together.
    // For example, if two APIs and a SPA are used to provide the complete application
    // they should all use the same namespace.
    namespace: ["gt-agir"],
    application: [
        type: 'service',
        name: 'agir-work-planning-web',
        tier: "frontend",
        runtime: "nodejs",
        framework: "angular",
        keywords: ["agir", "planning", "SPA", "planification"],
    ],
    packaging: [
        dockerfilePath: "./Dockerfile",  // The location of the Dockerfile to use
    ],
    execution: [
        service: [
            port: 4200
        ],
        resources: [
            minCpu: "10m",
            minMemory: "150Mi",
            maxCpu: "1000m",
            maxMemory: "1000Mi"
        ],
        autoScaling: [
            // K8s will start more containers of your application when the current ones
            // reach the cpuUsagePercentage limit set below.
            // minReplicas indicates the minimum number of instances of containers of
            // your app, while maxReplicas is the maximum K8s will be allowed to start.
            // NOTE: It is the responsibility of your application to synchronize its
            // data between multiple replicas.  If your application does not support
            // such scaling, set both Replicas values to 1.
            minReplicas: 1,
            maxReplicas: 2,
            cpuUsagePercentage: 50
        ]
    ],
    ingress : [
        overrides: [
            dev: [
                hosts: [
                    [
                        "uri" : "services.kube.dev.ile.montreal.qc.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.dev.montreal.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.dev.interne.montreal.ca",
                        "paths" : ['/agir-planification']
                    ]
                ]
            ],
            accept: [
                hosts: [
                    [
                        "uri" : "services.kube.accept.ile.montreal.qc.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.accept.montreal.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.accept.interne.montreal.ca",
                        "paths" : ['/agir-planification']
                    ]
                ]
            ],
            'training@accept': [
                hosts: [
                    [
                        "uri" : "services.kube.accept.ile.montreal.qc.ca",
                        "paths" : ['/agir-planification-formation']
                    ],
                    [
                        "uri" : "services.accept.montreal.ca",
                        "paths" : ['/agir-planification-formation']
                    ],
                    [
                        "uri" : "services.accept.interne.montreal.ca",
                        "paths" : ['/agir-planification-formation']
                    ]
                ]
            ],
            prod: [
                hosts: [
                    [
                        "uri" : "services.kube.ile.montreal.qc.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.montreal.ca",
                        "paths" : ['/agir-planification']
                    ],
                    [
                        "uri" : "services.interne.montreal.ca",
                        "paths" : ['/agir-planification']
                    ]
                ]
            ]
        ]
    ],
    approval: [
        enable: true,
        approvers: [
            "urielju",
            "uchou83",
            "uroymyy",
            "udicrbr",
            "uloursi"
        ]
    ],
    notifications: [
        chat: [
            room: "agir-planification-ci",
            notify: true
        ],
        mail: [
            to: [
                // Full email, or prefix of the email address ville.montreal.qc.ca
                // ex: "john.doe", "jane.dear@mailinator.com"
                // Note that the code U (e.g., udev123) will not work since there
                // is no email using that id.
                "julien.riel"
            ]
        ]
    ],
    debug: true
])


pipeline.start(ctx) {

    pipeline.withSourceCode(ctx) {

        pipeline.buildStage(ctx) {
            pipeline.buildDockerImage(ctx)
        }

        pipeline.prePublishStage(ctx) {
            pipeline.publishDraftDockerImage(ctx)
        }
    }

    pipeline.withDraftDockerImage(ctx) {
        pipeline.testInDraftDockerContainerStage (ctx) {
            try {
                sh """
                    cd /usr/src/build/
                    npm install
                    npm run lint
                    # npm run test
                """
            } finally {

            }
        }

        pipeline.publishStage(ctx) {
            pipeline.publishDockerImage(ctx)
        }

        pipeline.deployStage(ctx) {
            pipeline.deployApp(ctx)
        }
    }
}
